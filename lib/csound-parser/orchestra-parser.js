/* parser generated by jison 0.4.18-153 */
/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yy, yystate, $0, yyvstack, yylstack, yystack, yysstack, ...),
 *               where `...` denotes the (optional) additional arguments the user passed to
 *               `parser.parse(str, ...)`
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj);
 *
 *    originalParseError: function(str, hash),
 *               The basic parseError handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are passed verbatim to the grammar rules' action code.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index),
 *        next: function(),
 *        lex: function(),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The parseError function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 *  When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 *  instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 *  When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 *  from either the parser or lexer, `this` will still reference the related *parser*
 *  instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 *  Please do note that in the latter situation, the `expected` field will be omitted as
 *  type of failure is assumed not to be due to *parse errors* but rather due to user
 *  action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy [, optional parse() args])
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *  
 *  yy: {
 *      pre_parse:  function(yy [, optional parse() args])
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval [, optional parse() args]) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another. 
 *                 When it does not return any value, the parser will return the original
 *                 `retval`. 
 *                 This function is invoked immediately before `Parser.post_parse()`.
 *
 *      parseError: function(str, hash)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */
var orchestraParser = (function () {

// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';



// helper: reconstruct the productions[] table
function bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for (var i = 0, l = p.length; i < l; i++) {
        rv.push([
            p[i],
            r[i]
        ]);
    }
    return rv;
}



// helper: reconstruct the 'goto' table
function bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for (var i = 0, l = d.length; i < l; i++) {
        var n = d[i];
        var q = {};
        for (var j = 0; j < n; j++) {
            var z = y.shift();
            switch (t.shift()) {
            case 2:
                q[z] = [
                    m.shift(),
                    g.shift()
                ];
                break;

            case 0:
                q[z] = a.shift();
                break;

            default:
                // type === 1: accept
                q[z] = [
                    3
                ];
            }
        }
        rv.push(q);
    }
    return rv;
}

// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function s(c, l, a) {
    a = a || 0;
    for (var i = 0; i < l; i++) {
        this.push(c);
        c += a;
    }
}

// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function c(i, l) {
    i = this.length - i;
    for (l += i; i < l; i++) {
        this.push(this[i]);
    }
}

// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function u(a) {
    var rv = [];
    for (var i = 0, l = a.length; i < l; i++) {
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else {
            rv.push(e);
        }
    }
    return rv;
}

var parser = {
trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  errorRecoveryTokenDiscardCount: 3
},
symbols_: {
  "!": 10,
  "!=": 58,
  "#": 18,
  "$accept": 0,
  "$end": 1,
  "%": 14,
  "&": 17,
  "&&": 64,
  "(": 3,
  ")": 4,
  "*": 11,
  "*=": 73,
  "+": 7,
  "+=": 71,
  ",": 22,
  "-": 8,
  "-=": 72,
  "/": 12,
  "/=": 74,
  ":": 21,
  "<": 15,
  "<<": 49,
  "<=": 53,
  "=": 23,
  "==": 57,
  ">": 16,
  ">=": 54,
  ">>": 50,
  "?": 20,
  "DECIMAL_INTEGER": 33,
  "DO": 95,
  "ELSE": 89,
  "ELSEIF": 87,
  "ENDIF": 93,
  "ENDIN": 105,
  "ENDOP": 111,
  "EOF": 1,
  "GLOBAL_VALUE_IDENTIFIER": 27,
  "GOTO": 82,
  "IDENTIFIER": 25,
  "IF": 92,
  "INSTR": 104,
  "LABEL": 68,
  "NEWLINE": 79,
  "NUMBER": 35,
  "OD": 98,
  "OPCODE": 29,
  "OPCODE_INPUT_TYPE_SIGNATURE": 109,
  "OPCODE_OUTPUT_TYPE_ANNOTATION": 41,
  "OPCODE_OUTPUT_TYPE_SIGNATURE": 107,
  "STRING": 36,
  "THEN": 84,
  "UNTIL": 99,
  "VOID_OPCODE": 31,
  "WHILE": 97,
  "[": 5,
  "]": 6,
  "^": 13,
  "additive_expression": 47,
  "additive_operator": 46,
  "and_expression": 60,
  "assignment_statement": 78,
  "compound_assignment_operator": 70,
  "conditional_expression": 38,
  "constant": 34,
  "decimal_integer": 32,
  "declarator": 75,
  "do": 94,
  "else": 88,
  "elseif": 90,
  "elseif_statement": 86,
  "equality_expression": 59,
  "equality_operator": 56,
  "error": 2,
  "exclusive_or_expression": 61,
  "global_value_identifier": 26,
  "goto_statement": 81,
  "identifier": 24,
  "if_statement": 91,
  "inclusive_or_expression": 62,
  "instrument": 103,
  "instrument_number_and_name_list": 102,
  "instrument_number_or_name": 100,
  "instrument_numbers_and_names": 101,
  "labeled_statement": 67,
  "logical_and_expression": 63,
  "logical_or_expression": 65,
  "loop_statement": 96,
  "multiplicative_expression": 45,
  "multiplicative_operator": 44,
  "opcode": 28,
  "opcode_definition": 110,
  "opcode_expression": 77,
  "opcode_input_type_signature": 108,
  "opcode_inputs": 40,
  "opcode_output_type_signature": 106,
  "opcode_outputs": 76,
  "orchestra": 114,
  "orchestra_statement": 112,
  "orchestra_statements": 113,
  "postfix_expression": 39,
  "primary_expression": 37,
  "relational_expression": 55,
  "relational_operator": 52,
  "shift_expression": 51,
  "shift_operator": 48,
  "statement": 69,
  "statements": 85,
  "then_statement": 83,
  "unary_expression": 43,
  "unary_operator": 42,
  "void_opcode": 30,
  "void_opcode_statement": 80,
  "|": 19,
  "||": 66,
  "~": 9
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "(",
  4: ")",
  5: "[",
  6: "]",
  7: "+",
  8: "-",
  9: "~",
  10: "!",
  11: "*",
  12: "/",
  13: "^",
  14: "%",
  15: "<",
  16: ">",
  17: "&",
  18: "#",
  19: "|",
  20: "?",
  21: ":",
  22: ",",
  23: "=",
  25: "IDENTIFIER",
  27: "GLOBAL_VALUE_IDENTIFIER",
  29: "OPCODE",
  31: "VOID_OPCODE",
  33: "DECIMAL_INTEGER",
  35: "NUMBER",
  36: "STRING",
  41: "OPCODE_OUTPUT_TYPE_ANNOTATION",
  49: "<<",
  50: ">>",
  53: "<=",
  54: ">=",
  57: "==",
  58: "!=",
  64: "&&",
  66: "||",
  68: "LABEL",
  71: "+=",
  72: "-=",
  73: "*=",
  74: "/=",
  79: "NEWLINE",
  82: "GOTO",
  84: "THEN",
  87: "ELSEIF",
  89: "ELSE",
  92: "IF",
  93: "ENDIF",
  95: "DO",
  97: "WHILE",
  98: "OD",
  99: "UNTIL",
  104: "INSTR",
  105: "ENDIN",
  107: "OPCODE_OUTPUT_TYPE_SIGNATURE",
  109: "OPCODE_INPUT_TYPE_SIGNATURE",
  111: "ENDOP"
},
TERROR: 2,
EOF: 1,

// internals: defined here so the object *structure* doesn't get modified by parse() et al,
// thus helping JIT compilers like Chrome V8.
originalQuoteName: null,
originalParseError: null,
cleanupAfterParse: null,
constructParseErrorInfo: null,

__reentrant_call_depth: 0,       // INTERNAL USE ONLY

// APIs which will be set up depending on user action code analysis:
//yyErrOk: 0,
//yyClearIn: 0,

// Helper APIs
// -----------

// Helper function which can be overridden by user code later on: put suitable quotes around
// literal IDs in a description string.
quoteName: function parser_quoteName(id_str) {
    return '"' + id_str + '"';
},

// Return a more-or-less human-readable description of the given symbol, when available,
// or the symbol itself, serving as its own 'description' for lack of something better to serve up.
//
// Return NULL when the symbol is unknown to the parser.
describeSymbol: function parser_describeSymbol(symbol) {
    if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
        return this.terminal_descriptions_[symbol];
    }
    else if (symbol === this.EOF) {
        return 'end of input';
    }
    else if (this.terminals_[symbol]) {
        return this.quoteName(this.terminals_[symbol]);
    }
    // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
    //
    // An example of this may be where a rule's action code contains a call like this:
    //
    //      parser.describeSymbol(#$)
    //
    // to obtain a human-readable description or name of the current grammar rule. This comes handy in
    // error handling action code blocks, for example.
    var s = this.symbols_;
    for (var key in s) {
        if (s[key] === symbol) {
            return key;
        }
    }
    return null;
},

// Produce a (more or less) human-readable list of expected tokens at the point of failure.
//
// The produced list may contain token or token set descriptions instead of the tokens
// themselves to help turning this output into something that easier to read by humans
// unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
// expected terminals and nonterminals is produced.
//
// The returned list (array) will not contain any duplicate entries.
collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
    var TERROR = this.TERROR;
    var tokenset = [];
    var check = {};
    // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
    // If so, use that one instead of the less palatable token set.
    if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
        return [
            this.state_descriptions_[state]
        ];
    }
    for (var p in this.table[state]) {
        p = +p;
        if (p !== TERROR) {
            var d = do_not_describe ? p : this.describeSymbol(p);
            if (d && !check[d]) {
                tokenset.push(d);
                check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
            }
        }
    }
    return tokenset;
},
productions_: bp({
  pop: u([
  s,
  [24, 6, 2],
  34,
  34,
  s,
  [37, 5],
  s,
  [39, 4],
  s,
  [42, 4],
  43,
  43,
  s,
  [44, 4],
  45,
  45,
  46,
  46,
  47,
  47,
  48,
  48,
  51,
  51,
  s,
  [52, 4],
  55,
  55,
  56,
  56,
  59,
  59,
  60,
  60,
  61,
  61,
  62,
  62,
  63,
  63,
  65,
  65,
  38,
  38,
  67,
  67,
  s,
  [70, 4],
  s,
  [75, 3],
  76,
  76,
  40,
  40,
  77,
  77,
  s,
  [78, 3],
  80,
  s,
  [81, 3],
  s,
  [83, 3],
  86,
  88,
  s,
  [90, 3],
  s,
  [91, 4],
  94,
  94,
  96,
  96,
  s,
  [69, 7],
  85,
  85,
  s,
  [100, 3],
  101,
  101,
  102,
  103,
  103,
  106,
  108,
  110,
  110,
  s,
  [112, 4],
  113,
  113,
  114
]),
  rule: u([
  s,
  [1, 11],
  3,
  1,
  1,
  4,
  4,
  5,
  s,
  [1, 5],
  2,
  c,
  [17, 8],
  c,
  [4, 9],
  c,
  [10, 8],
  3,
  c,
  [4, 9],
  5,
  2,
  c,
  [38, 7],
  4,
  c,
  [15, 5],
  2,
  4,
  4,
  s,
  [3, 4],
  2,
  3,
  2,
  c,
  [3, 3],
  1,
  c,
  [5, 3],
  5,
  6,
  6,
  c,
  [21, 4],
  s,
  [1, 8],
  c,
  [45, 3],
  2,
  c,
  [39, 3],
  6,
  c,
  [97, 3],
  10,
  9,
  c,
  [22, 5],
  2,
  1
])
}),
performAction: function parser__PerformAction(yytext, yyloc, yy, yystate /* action[1] */, $0, yyvstack, yylstack) {
/* this == yyval */

switch (yystate) {
case 1:
    /*! Production::    identifier : IDENTIFIER */
case 2:
    /*! Production::    global_value_identifier : GLOBAL_VALUE_IDENTIFIER */
case 3:
    /*! Production::    opcode : OPCODE */
case 4:
    /*! Production::    void_opcode : VOID_OPCODE */
    this.$ = new Identifier(this._$, {string: yyvstack[$0]});
    break;

case 5:
    /*! Production::    decimal_integer : DECIMAL_INTEGER */
case 7:
    /*! Production::    constant : NUMBER */
    this.$ = new NumberLiteral(this._$, {string: yyvstack[$0]});
    break;

case 8:
    /*! Production::    constant : STRING */
    this.$ = new StringLiteral(this._$, {string: yyvstack[$0]});
    break;

case 12:
    /*! Production::    primary_expression : '(' conditional_expression ')' */
    this.$ = yyvstack[$0 - 1];
    break;

case 13:
    /*! Production::    primary_expression : error */
    parser.parseError('', {}, {
      type: 'Error',
      text: 'Expected expression',
      range: parser.lexer.rangeFromPosition(this._$.first_line, this._$.first_column)
    });
    break;

case 15:
    /*! Production::    postfix_expression : postfix_expression '[' conditional_expression ']' */
case 68:
    /*! Production::    declarator : declarator '[' conditional_expression ']' */
    this.$ = new ArrayMember(this._$, {children: [yyvstack[$0 - 3], yyvstack[$0 - 1]]});
    break;

case 16:
    /*! Production::    postfix_expression : opcode '(' opcode_inputs ')' */
    this.$ = new OpcodeExpression(this._$, {children: [
      yyvstack[$0 - 3],
      new ArgumentList(yylstack[$0 - 1], {children: yyvstack[$0 - 1]})
    ]});
    break;

case 17:
    /*! Production::    postfix_expression : opcode OPCODE_OUTPUT_TYPE_ANNOTATION '(' opcode_inputs ')' */
    this.$ = new OpcodeExpression(this._$, {outputTypeAnnotation: yyvstack[$0 - 3], children: [
      yyvstack[$0 - 4],
      new ArgumentList(yylstack[$0 - 1], {children: yyvstack[$0 - 1]})],
    });
    break;

case 18:
    /*! Production::    unary_operator : '+' */
    this.$ = new UnaryPlus(this._$);
    break;

case 19:
    /*! Production::    unary_operator : '-' */
    this.$ = new UnaryMinus(this._$);
    break;

case 20:
    /*! Production::    unary_operator : '~' */
    this.$ = new BitwiseComplement(this._$);
    break;

case 21:
    /*! Production::    unary_operator : '!' */
    this.$ = new Not(this._$);
    break;

case 23:
    /*! Production::    unary_expression : unary_operator unary_expression */
    this.$ = new UnaryOperation(this._$, {children: [yyvstack[$0 - 1], yyvstack[$0]]});
    break;

case 24:
    /*! Production::    multiplicative_operator : '*' */
case 64:
    /*! Production::    compound_assignment_operator : '*=' */
    this.$ = new Multiplication(this._$);
    break;

case 25:
    /*! Production::    multiplicative_operator : '/' */
case 65:
    /*! Production::    compound_assignment_operator : '/=' */
    this.$ = new Division(this._$);
    break;

case 26:
    /*! Production::    multiplicative_operator : '^' */
    this.$ = new Power(this._$);
    break;

case 27:
    /*! Production::    multiplicative_operator : '%' */
    this.$ = new Modulus(this._$);
    break;

case 29:
    /*! Production::    multiplicative_expression : multiplicative_expression multiplicative_operator unary_expression */
case 33:
    /*! Production::    additive_expression : additive_expression additive_operator multiplicative_expression */
case 37:
    /*! Production::    shift_expression : shift_expression shift_operator additive_expression */
case 43:
    /*! Production::    relational_expression : relational_expression relational_operator shift_expression */
case 47:
    /*! Production::    equality_expression : equality_expression equality_operator relational_expression */
    this.$ = new BinaryOperation(this._$, {children: [yyvstack[$0 - 2], yyvstack[$0 - 1], yyvstack[$0]]});
    break;

case 30:
    /*! Production::    additive_operator : '+' */
case 62:
    /*! Production::    compound_assignment_operator : '+=' */
    this.$ = new Plus(this._$);
    break;

case 31:
    /*! Production::    additive_operator : '-' */
case 63:
    /*! Production::    compound_assignment_operator : '-=' */
    this.$ = new Minus(this._$);
    break;

case 34:
    /*! Production::    shift_operator : '<<' */
    this.$ = new LeftShift(this._$);
    break;

case 35:
    /*! Production::    shift_operator : '>>' */
    this.$ = new RightShift(this._$);
    break;

case 38:
    /*! Production::    relational_operator : '<' */
    this.$ = new LessThan(this._$);
    break;

case 39:
    /*! Production::    relational_operator : '>' */
    this.$ = new GreaterThan(this._$);
    break;

case 40:
    /*! Production::    relational_operator : '<=' */
    this.$ = new LessThanOrEqual(this._$);
    break;

case 41:
    /*! Production::    relational_operator : '>=' */
    this.$ = new GreaterThanOrEqual(this._$);
    break;

case 44:
    /*! Production::    equality_operator : '==' */
    this.$ = new Equal(this._$);
    break;

case 45:
    /*! Production::    equality_operator : '!=' */
    this.$ = new NotEqual(this._$);
    break;

case 49:
    /*! Production::    and_expression : and_expression '&' equality_expression */
    this.$ = new BinaryOperation(this._$, {children: [yyvstack[$0 - 2], new BitwiseAND(yylstack[$0 - 1]), yyvstack[$0]]});
    break;

case 51:
    /*! Production::    exclusive_or_expression : exclusive_or_expression '#' and_expression */
    this.$ = new BinaryOperation(this._$, {children: [yyvstack[$0 - 2], new BitwiseXOR(yylstack[$0 - 1]), yyvstack[$0]]});
    break;

case 53:
    /*! Production::    inclusive_or_expression : inclusive_or_expression '|' exclusive_or_expression */
    this.$ = new BinaryOperation(this._$, {children: [yyvstack[$0 - 2], new BitwiseOR(yylstack[$0 - 1]), yyvstack[$0]]});
    break;

case 55:
    /*! Production::    logical_and_expression : logical_and_expression '&&' inclusive_or_expression */
    this.$ = new BinaryOperation(this._$, {children: [yyvstack[$0 - 2], new And(yylstack[$0 - 1]), yyvstack[$0]]});
    break;

case 57:
    /*! Production::    logical_or_expression : logical_or_expression '||' logical_and_expression */
    this.$ = new BinaryOperation(this._$, {children: [yyvstack[$0 - 2], new Or(yylstack[$0 - 1]), yyvstack[$0]]});
    break;

case 59:
    /*! Production::    conditional_expression : logical_or_expression '?' conditional_expression ':' conditional_expression */
    this.$ = new ConditionalExpression(this._$, {children: [yyvstack[$0 - 4], yyvstack[$0 - 3], yyvstack[$0 - 2]]});
    break;

case 60:
    /*! Production::    labeled_statement : LABEL statement */
    this.$ = new LabeledStatement(this._$, {children: [yyvstack[$0 - 1], yyvstack[$0]]});
    break;

case 61:
    /*! Production::    labeled_statement : LABEL EOF */
    this.$ = new LabeledStatement(this._$, {children: [yyvstack[$0 - 1]]});
    break;

case 67:
    /*! Production::    declarator : declarator '[' ']' */
    this.$ = new ArrayDeclarator(this._$, {children: [yyvstack[$0 - 2]]});
    break;

case 69:
    /*! Production::    opcode_outputs : declarator */
case 71:
    /*! Production::    opcode_inputs : conditional_expression */
case 105:
    /*! Production::    statements : statement */
case 110:
    /*! Production::    instrument_numbers_and_names : instrument_number_or_name */
case 123:
    /*! Production::    orchestra_statements : orchestra_statement */
    this.$ = [yyvstack[$0]];
    break;

case 70:
    /*! Production::    opcode_outputs : opcode_outputs ',' declarator */
    this.$.push(yyvstack[$0 - 1]);
    break;

case 72:
    /*! Production::    opcode_inputs : opcode_inputs ',' conditional_expression */
case 106:
    /*! Production::    statements : statements statement */
case 111:
    /*! Production::    instrument_numbers_and_names : instrument_numbers_and_names ',' instrument_number_or_name */
case 124:
    /*! Production::    orchestra_statements : orchestra_statements orchestra_statement */
    this.$.push(yyvstack[$0]);
    break;

case 73:
    /*! Production::    opcode_expression : opcode */
    this.$ = new OpcodeExpression(this._$, {children: [yyvstack[$0]]});
    break;

case 74:
    /*! Production::    opcode_expression : opcode opcode_inputs */
    this.$ = new OpcodeExpression(this._$, {children: [
      yyvstack[$0 - 1],
      new ArgumentList(yylstack[$0], {children: yyvstack[$0]})
    ]});
    break;

case 75:
    /*! Production::    assignment_statement : declarator '=' conditional_expression NEWLINE */
case 119:
    /*! Production::    orchestra_statement : global_value_identifier '=' decimal_integer NEWLINE */
    this.$ = new Assignment(this._$, {children: [yyvstack[$0 - 3], yyvstack[$0 - 1]]});
    break;

case 76:
    /*! Production::    assignment_statement : identifier compound_assignment_operator conditional_expression NEWLINE */
    this.$ = new CompoundAssignment(this._$, {children: [yyvstack[$0 - 3], yyvstack[$0 - 2], yyvstack[$0 - 1]]});
    break;

case 77:
    /*! Production::    assignment_statement : opcode_outputs opcode_expression NEWLINE */
    this.$ = new OpcodeStatement(this._$, {children: [
      new ArgumentList(yylstack[$0 - 2], {children: yyvstack[$0 - 2]}),
      yyvstack[$0 - 1]
    ]});
    break;

case 78:
    /*! Production::    void_opcode_statement : void_opcode opcode_inputs NEWLINE */
    this.$ = new VoidOpcodeStatement(this._$, {children: [
      new OpcodeExpression({
        first_line: yylstack[$0 - 2].first_line,
        first_column: yylstack[$0 - 2].first_column,
        last_line: yylstack[$0 - 1].last_line,
        last_column: yylstack[$0 - 1].last_column
      }, {children: [
        yyvstack[$0 - 2],
        new ArgumentList(yylstack[$0 - 1], {children: yyvstack[$0 - 1]})
      ]})
    ]});
    break;

case 79:
    /*! Production::    goto_statement : GOTO identifier NEWLINE */
case 80:
    /*! Production::    goto_statement : GOTO decimal_integer NEWLINE */
    this.$ = new Goto(this._$, {children: [yyvstack[$0 - 1]]});
    break;

case 81:
    /*! Production::    goto_statement : GOTO error */
    parser.messages.push({
      type: 'Error',
      text: 'Expected newline',
      range: parser.lexer.rangeFromPosition(yylstack[$0 - 1].last_line, yylstack[$0 - 1].last_column)
    });
    break;

case 82:
    /*! Production::    then_statement : THEN NEWLINE statements */
    this.$ = new Then(this._$, {children: yyvstack[$0]});
    break;

case 83:
    /*! Production::    then_statement : THEN NEWLINE */
    this.$ = new Then(this._$);
    break;

case 84:
    /*! Production::    then_statement : THEN error */
    this.$ = new Then(this._$);
    parser.messages.push({
      type: 'Error',
      text: 'Expected newline',
      range: parser.lexer.rangeFromPosition(yylstack[$0 - 1].last_line, yylstack[$0 - 1].last_column)
    });
    break;

case 85:
    /*! Production::    elseif_statement : ELSEIF equality_expression then_statement */
case 90:
    /*! Production::    if_statement : IF equality_expression goto_statement */
    this.$ = new If(this._$, {children: [yyvstack[$0 - 1], yyvstack[$0]]});
    break;

case 86:
    /*! Production::    else : ELSE statements */
    this.$ = new Else(this._$, {children: yyvstack[$0]});
    break;

case 88:
    /*! Production::    elseif : elseif elseif_statement */
    this.$.children.push(new Else(yylstack[$0], {children: [yyvstack[$0]]}));
    break;

case 89:
    /*! Production::    elseif : elseif else */
    this.$.children.push(yyvstack[$0]);
    break;

case 91:
    /*! Production::    if_statement : IF equality_expression then_statement ENDIF NEWLINE */
    this.$ = new If(this._$, {children: [yyvstack[$0 - 3], yyvstack[$0 - 2]]});
    break;

case 92:
    /*! Production::    if_statement : IF equality_expression then_statement else ENDIF NEWLINE */
    this.$ = new If(this._$, {children: [yyvstack[$0 - 4], yyvstack[$0 - 3], yyvstack[$0 - 2]]});
    break;

case 93:
    /*! Production::    if_statement : IF equality_expression then_statement elseif ENDIF NEWLINE */
    this.$ = new If(this._$, {children: [yyvstack[$0 - 4], yyvstack[$0 - 3], new Else(yylstack[$0 - 2], {children: [yyvstack[$0 - 2]]})]});
    break;

case 94:
    /*! Production::    do : DO */
    this.$ = new Do(this._$);
    break;

case 95:
    /*! Production::    do : DO statements */
    this.$ = new Do(this._$, {children: yyvstack[$0]});
    break;

case 96:
    /*! Production::    loop_statement : WHILE equality_expression do OD */
    this.$ = new While(this._$, {children: [yyvstack[$0 - 2], yyvstack[$0 - 1]]});
    break;

case 97:
    /*! Production::    loop_statement : UNTIL equality_expression do OD */
    this.$ = new Until(this._$, {children: [yyvstack[$0 - 2], yyvstack[$0 - 1]]});
    break;

case 104:
    /*! Production::    statement : NEWLINE */
    this.$ = new Empty(this._$);
    break;

case 109:
    /*! Production::    instrument_number_or_name : '+' identifier */
    this.$ = new UnaryOperation(this._$, {children: [new UnaryPlus(yylstack[$0 - 1]), yyvstack[$0]]});
    break;

case 112:
    /*! Production::    instrument_number_and_name_list : instrument_numbers_and_names */
    this.$ = new InstrumentNumberAndNameList(this._$, {children: yyvstack[$0]});
    break;

case 113:
    /*! Production::    instrument : INSTR instrument_number_and_name_list NEWLINE statements ENDIN NEWLINE */
    yyvstack[$0 - 2].splice(0, 0, yyvstack[$0 - 4]);
    this.$ = new Instrument(this._$, {children: yyvstack[$0 - 2]});
    break;

case 114:
    /*! Production::    instrument : INSTR instrument_number_and_name_list NEWLINE ENDIN NEWLINE */
    this.$ = new Instrument(this._$, {children: [yyvstack[$0 - 3]]});
    break;

case 115:
    /*! Production::    opcode_output_type_signature : OPCODE_OUTPUT_TYPE_SIGNATURE */
    this.$ = new OpcodeOutputTypeSignature(this._$, {string: yyvstack[$0]});
    break;

case 116:
    /*! Production::    opcode_input_type_signature : OPCODE_INPUT_TYPE_SIGNATURE */
    this.$ = new OpcodeInputTypeSignature(this._$, {string: yyvstack[$0]});
    break;

case 117:
    /*! Production::    opcode_definition : OPCODE identifier ',' opcode_output_type_signature ',' opcode_input_type_signature NEWLINE statements ENDOP NEWLINE */
    yyvstack[$0 - 2].splice(0, 0, yyvstack[$0 - 8], yyvstack[$0 - 6], yyvstack[$0 - 4]);
    this.$ = new Opcode(this._$, {children: yyvstack[$0 - 2]});
    break;

case 118:
    /*! Production::    opcode_definition : OPCODE identifier ',' opcode_output_type_signature ',' opcode_input_type_signature NEWLINE ENDOP NEWLINE */
    this.$ = new Opcode(this._$, {children: [yyvstack[$0 - 7], yyvstack[$0 - 5], yyvstack[$0 - 3]]});
    break;

case 125:
    /*! Production::    orchestra : orchestra_statements */
    this.$ = new Orchestra(this._$, {children: yyvstack[$0]});
    return this.$;
    break;

}
},
table: bt({
  len: u([
  28,
  1,
  27,
  12,
  1,
  s,
  [12, 3],
  30,
  s,
  [18, 7],
  8,
  2,
  20,
  33,
  4,
  9,
  4,
  s,
  [26, 3],
  5,
  12,
  35,
  12,
  2,
  1,
  s,
  [2, 5],
  29,
  1,
  18,
  18,
  2,
  3,
  s,
  [7, 5, 1],
  14,
  21,
  23,
  25,
  29,
  28,
  29,
  21,
  29,
  2,
  s,
  [12, 4],
  s,
  [29, 3],
  32,
  29,
  14,
  c,
  [6, 4],
  33,
  32,
  s,
  [12, 4],
  1,
  3,
  34,
  7,
  5,
  5,
  1,
  1,
  18,
  1,
  21,
  6,
  2,
  2,
  18,
  32,
  32,
  s,
  [30, 6, -1],
  12,
  12,
  24,
  s,
  [12, 4],
  23,
  12,
  12,
  22,
  12,
  12,
  21,
  s,
  [12, 4],
  32,
  28,
  33,
  s,
  [1, 3],
  4,
  c,
  [42, 3],
  3,
  3,
  2,
  18,
  6,
  2,
  1,
  21,
  c,
  [99, 3],
  12,
  20,
  1,
  14,
  2,
  1,
  1,
  3,
  1,
  c,
  [105, 10],
  1,
  2,
  33,
  29,
  18,
  4,
  18,
  1,
  1,
  5,
  20,
  3,
  26,
  23,
  3,
  18,
  20,
  18,
  1,
  14,
  12,
  2,
  32,
  29,
  29,
  2,
  c,
  [20, 3],
  3,
  3,
  22,
  5,
  22,
  12,
  c,
  [28, 3],
  29,
  18,
  18,
  3,
  21,
  20,
  1,
  c,
  [200, 3]
]),
  symbol: u([
  s,
  [24, 4, 1],
  29,
  30,
  31,
  67,
  68,
  69,
  75,
  76,
  s,
  [78, 5, 1],
  91,
  92,
  96,
  97,
  99,
  103,
  104,
  110,
  112,
  113,
  114,
  1,
  1,
  c,
  [30, 26],
  1,
  s,
  [25, 4, 2],
  68,
  79,
  82,
  92,
  97,
  99,
  104,
  23,
  c,
  [13, 12],
  c,
  [12, 24],
  s,
  [4, 5, 1],
  s,
  [11, 13, 1],
  49,
  50,
  53,
  54,
  57,
  58,
  64,
  66,
  79,
  82,
  84,
  95,
  c,
  [42, 8],
  87,
  89,
  92,
  93,
  97,
  98,
  99,
  104,
  105,
  111,
  c,
  [18, 108],
  7,
  24,
  25,
  32,
  33,
  100,
  101,
  102,
  24,
  25,
  c,
  [242, 3],
  c,
  [239, 17],
  2,
  3,
  s,
  [7, 4, 1],
  s,
  [24, 6, 1],
  s,
  [32, 9, 1],
  42,
  43,
  45,
  s,
  [47, 4, 4],
  s,
  [60, 4, 1],
  65,
  5,
  22,
  23,
  29,
  c,
  [4, 4],
  s,
  [70, 5, 1],
  22,
  28,
  29,
  77,
  c,
  [50, 18],
  39,
  c,
  [48, 7],
  c,
  [26, 53],
  c,
  [158, 4],
  c,
  [31, 6],
  c,
  [186, 3],
  33,
  35,
  36,
  c,
  [331, 18],
  29,
  c,
  [332, 8],
  c,
  [130, 4],
  c,
  [336, 12],
  c,
  [378, 4],
  32,
  33,
  79,
  22,
  79,
  22,
  c,
  [4, 5],
  24,
  25,
  c,
  [60, 17],
  c,
  [390, 12],
  22,
  c,
  [301, 36],
  22,
  79,
  4,
  c,
  [3, 3],
  6,
  c,
  [59, 3],
  66,
  c,
  [7, 6],
  c,
  [60, 3],
  4,
  6,
  c,
  [75, 4],
  c,
  [9, 5],
  c,
  [85, 5],
  c,
  [10, 5],
  c,
  [96, 6],
  c,
  [11, 11],
  56,
  c,
  [104, 5],
  4,
  6,
  c,
  [123, 8],
  52,
  c,
  [122, 10],
  c,
  [21, 10],
  48,
  c,
  [145, 12],
  4,
  c,
  [173, 3],
  c,
  [25, 8],
  46,
  c,
  [25, 16],
  c,
  [198, 12],
  44,
  c,
  [29, 28],
  c,
  [28, 13],
  c,
  [256, 28],
  c,
  [388, 21],
  c,
  [50, 29],
  3,
  41,
  c,
  [409, 12],
  c,
  [12, 36],
  c,
  [79, 29],
  c,
  [29, 58],
  c,
  [677, 20],
  c,
  [676, 12],
  c,
  [61, 35],
  c,
  [160, 6],
  41,
  79,
  c,
  [162, 119],
  2,
  3,
  s,
  [6, 5, 1],
  c,
  [33, 28],
  c,
  [32, 36],
  c,
  [394, 42],
  c,
  [782, 3],
  75,
  c,
  [988, 33],
  79,
  c,
  [693, 3],
  s,
  [81, 4, 1],
  c,
  [7, 3],
  94,
  95,
  c,
  [5, 5],
  79,
  79,
  c,
  [788, 18],
  c,
  [75, 3],
  c,
  [1079, 12],
  85,
  c,
  [1080, 5],
  105,
  c,
  [1111, 6],
  22,
  79,
  106,
  107,
  c,
  [50, 18],
  c,
  [205, 38],
  c,
  [32, 44],
  c,
  [31, 12],
  c,
  [30, 29],
  c,
  [29, 28],
  c,
  [28, 27],
  c,
  [1211, 51],
  c,
  [390, 30],
  c,
  [49, 18],
  c,
  [450, 48],
  c,
  [72, 23],
  c,
  [47, 46],
  c,
  [46, 45],
  c,
  [162, 66],
  c,
  [919, 15],
  c,
  [817, 47],
  c,
  [668, 13],
  3,
  4,
  79,
  c,
  [1655, 4],
  6,
  c,
  [657, 19],
  5,
  22,
  c,
  [1682, 3],
  29,
  22,
  c,
  [26, 19],
  s,
  [86, 5, 1],
  93,
  2,
  79,
  98,
  c,
  [691, 19],
  98,
  99,
  98,
  c,
  [1857, 44],
  c,
  [1629, 4],
  c,
  [1840, 19],
  105,
  79,
  25,
  c,
  [48, 11],
  c,
  [1585, 4],
  22,
  22,
  c,
  [1587, 3],
  21,
  c,
  [1581, 178],
  6,
  4,
  22,
  c,
  [389, 33],
  c,
  [1268, 29],
  c,
  [409, 20],
  23,
  29,
  c,
  [1088, 19],
  93,
  c,
  [407, 4],
  93,
  c,
  [1094, 20],
  87,
  89,
  93,
  c,
  [890, 26],
  c,
  [49, 15],
  87,
  89,
  91,
  92,
  93,
  c,
  [52, 6],
  c,
  [100, 18],
  c,
  [426, 18],
  98,
  99,
  c,
  [138, 19],
  c,
  [444, 14],
  c,
  [491, 12],
  108,
  109,
  c,
  [1637, 61],
  c,
  [29, 30],
  c,
  [2171, 19],
  79,
  79,
  c,
  [200, 3],
  c,
  [3, 3],
  c,
  [185, 14],
  c,
  [228, 8],
  c,
  [544, 3],
  83,
  84,
  c,
  [27, 22],
  c,
  [181, 12],
  79,
  c,
  [579, 3],
  21,
  c,
  [2224, 3],
  c,
  [422, 46],
  c,
  [18, 18],
  c,
  [136, 17],
  c,
  [414, 6],
  c,
  [342, 19],
  99,
  c,
  [185, 3],
  c,
  [2821, 24]
]),
  type: u([
  0,
  2,
  0,
  2,
  c,
  [3, 3],
  c,
  [7, 3],
  s,
  [0, 3],
  c,
  [5, 3],
  c,
  [12, 5],
  c,
  [15, 7],
  1,
  c,
  [13, 9],
  c,
  [30, 18],
  s,
  [2, 206],
  c,
  [227, 9],
  c,
  [10, 6],
  c,
  [239, 14],
  c,
  [35, 11],
  c,
  [256, 7],
  s,
  [0, 15],
  c,
  [35, 10],
  c,
  [41, 8],
  c,
  [50, 25],
  c,
  [26, 53],
  c,
  [134, 11],
  c,
  [221, 54],
  c,
  [11, 20],
  c,
  [358, 117],
  c,
  [16, 30],
  c,
  [163, 30],
  c,
  [188, 29],
  c,
  [217, 76],
  c,
  [388, 15],
  c,
  [712, 177],
  c,
  [677, 21],
  c,
  [162, 169],
  c,
  [33, 32],
  c,
  [227, 75],
  c,
  [938, 29],
  c,
  [893, 10],
  c,
  [27, 9],
  c,
  [5, 6],
  c,
  [215, 28],
  c,
  [1079, 8],
  c,
  [90, 7],
  c,
  [57, 9],
  c,
  [270, 56],
  c,
  [32, 56],
  c,
  [30, 29],
  c,
  [29, 28],
  c,
  [28, 27],
  c,
  [1211, 51],
  c,
  [523, 48],
  c,
  [595, 71],
  c,
  [47, 46],
  c,
  [1037, 99],
  c,
  [692, 60],
  c,
  [1656, 35],
  c,
  [140, 51],
  c,
  [691, 25],
  c,
  [219, 55],
  c,
  [1840, 18],
  c,
  [1581, 205],
  c,
  [389, 80],
  c,
  [1164, 23],
  c,
  [403, 29],
  c,
  [917, 22],
  c,
  [382, 14],
  c,
  [1134, 28],
  c,
  [426, 65],
  c,
  [1442, 40],
  c,
  [1587, 87],
  c,
  [185, 7],
  c,
  [228, 8],
  c,
  [303, 10],
  c,
  [27, 17],
  c,
  [1723, 94],
  c,
  [414, 14],
  c,
  [342, 46]
]),
  state: u([
  21,
  4,
  19,
  9,
  5,
  20,
  22,
  11,
  10,
  14,
  12,
  13,
  6,
  7,
  3,
  2,
  1,
  c,
  [17, 14],
  29,
  s,
  [35, 5, -1],
  38,
  21,
  19,
  9,
  39,
  c,
  [20, 7],
  62,
  63,
  57,
  68,
  64,
  56,
  42,
  54,
  41,
  55,
  s,
  [53, 11, -1],
  73,
  80,
  78,
  c,
  [24, 6],
  54,
  c,
  [22, 6],
  81,
  c,
  [14, 13],
  82,
  c,
  [14, 13],
  83,
  84,
  85,
  87,
  90,
  100,
  103,
  108,
  111,
  114,
  c,
  [23, 8],
  120,
  c,
  [9, 6],
  123,
  c,
  [33, 7],
  c,
  [83, 6],
  c,
  [20, 6],
  124,
  c,
  [20, 19],
  126,
  c,
  [20, 19],
  127,
  c,
  [20, 13],
  130,
  129,
  c,
  [166, 8],
  131,
  c,
  [23, 12],
  100,
  132,
  133,
  100,
  135,
  100,
  137,
  c,
  [205, 3],
  143,
  c,
  [205, 5],
  141,
  12,
  13,
  35,
  34,
  144,
  145,
  c,
  [44, 6],
  147,
  c,
  [86, 19],
  148,
  c,
  [20, 19],
  c,
  [19, 11],
  149,
  c,
  [18, 16],
  150,
  c,
  [17, 15],
  151,
  c,
  [16, 14],
  152,
  c,
  [15, 13],
  153,
  c,
  [14, 12],
  154,
  c,
  [13, 11],
  155,
  c,
  [12, 10],
  156,
  c,
  [11, 9],
  157,
  c,
  [10, 8],
  158,
  c,
  [9, 6],
  159,
  c,
  [155, 19],
  42,
  54,
  160,
  c,
  [21, 12],
  170,
  167,
  168,
  c,
  [235, 9],
  175,
  12,
  13,
  c,
  [12, 3],
  178,
  c,
  [452, 7],
  c,
  [382, 11],
  42,
  54,
  184,
  c,
  [52, 12],
  188,
  189,
  c,
  [51, 9],
  190,
  c,
  [492, 8],
  c,
  [106, 7],
  191,
  c,
  [26, 9],
  192,
  c,
  [77, 13],
  194,
  c,
  [38, 6],
  196,
  c,
  [145, 13],
  c,
  [109, 12],
  200,
  c,
  [13, 11],
  c,
  [68, 9],
  202,
  c,
  [68, 13]
]),
  mode: u([
  s,
  [1, 11],
  2,
  c,
  [12, 12],
  s,
  [2, 11],
  c,
  [13, 13],
  s,
  [2, 180],
  s,
  [1, 26],
  c,
  [220, 7],
  s,
  [1, 45],
  c,
  [137, 62],
  c,
  [340, 37],
  c,
  [100, 37],
  c,
  [76, 7],
  c,
  [6, 3],
  c,
  [47, 7],
  c,
  [7, 5],
  c,
  [59, 9],
  c,
  [68, 10],
  c,
  [78, 17],
  c,
  [58, 8],
  c,
  [56, 8],
  c,
  [111, 19],
  c,
  [514, 15],
  c,
  [145, 25],
  c,
  [273, 53],
  c,
  [50, 28],
  c,
  [362, 41],
  c,
  [393, 61],
  c,
  [606, 88],
  c,
  [748, 156],
  c,
  [167, 59],
  c,
  [821, 16],
  c,
  [75, 29],
  c,
  [106, 15],
  c,
  [34, 32],
  s,
  [1, 83],
  c,
  [426, 84],
  c,
  [96, 72],
  c,
  [132, 96],
  c,
  [352, 19],
  c,
  [996, 25],
  c,
  [909, 25],
  c,
  [495, 16],
  c,
  [169, 58],
  c,
  [116, 21],
  c,
  [121, 11],
  c,
  [1199, 163],
  c,
  [1535, 74],
  c,
  [804, 25],
  c,
  [786, 18],
  c,
  [263, 4],
  c,
  [108, 23],
  c,
  [1723, 14],
  c,
  [1369, 40],
  c,
  [196, 71],
  c,
  [381, 28],
  c,
  [185, 11],
  c,
  [199, 26],
  c,
  [1315, 75],
  c,
  [1019, 44]
]),
  goto: u([
  28,
  8,
  17,
  27,
  18,
  15,
  26,
  23,
  24,
  25,
  16,
  125,
  c,
  [12, 11],
  s,
  [123, 12],
  30,
  s,
  [120, 12],
  s,
  [121, 12],
  s,
  [122, 12],
  s,
  [2, 30],
  s,
  [98, 18],
  s,
  [99, 18],
  s,
  [100, 18],
  s,
  [101, 18],
  s,
  [102, 18],
  s,
  [103, 18],
  s,
  [104, 18],
  36,
  28,
  37,
  28,
  40,
  28,
  c,
  [219, 7],
  66,
  65,
  s,
  [58, 4, 1],
  28,
  8,
  67,
  37,
  69,
  70,
  72,
  69,
  71,
  69,
  s,
  [66, 4],
  s,
  [74, 4, 1],
  79,
  67,
  c,
  [26, 12],
  c,
  [12, 24],
  86,
  28,
  37,
  s,
  [4, 12],
  s,
  [1, 35],
  s,
  [124, 12],
  37,
  88,
  89,
  112,
  110,
  110,
  107,
  107,
  108,
  108,
  28,
  s,
  [5, 29],
  91,
  s,
  [60, 18],
  s,
  [61, 18],
  93,
  92,
  s,
  [71, 3],
  58,
  58,
  94,
  58,
  58,
  95,
  58,
  s,
  [56, 5],
  96,
  56,
  56,
  54,
  54,
  97,
  s,
  [54, 6],
  52,
  52,
  98,
  s,
  [52, 7],
  50,
  50,
  99,
  s,
  [50, 8],
  s,
  [48, 8],
  101,
  102,
  s,
  [48, 3],
  46,
  46,
  104,
  105,
  s,
  [46, 6],
  106,
  107,
  s,
  [46, 8],
  s,
  [42, 10],
  109,
  110,
  s,
  [42, 10],
  36,
  36,
  112,
  113,
  s,
  [36, 20],
  s,
  [32, 4],
  s,
  [115, 4, 1],
  s,
  [32, 20],
  s,
  [28, 28],
  22,
  119,
  s,
  [22, 27],
  c,
  [365, 12],
  s,
  [14, 29],
  121,
  122,
  s,
  [18, 12],
  s,
  [19, 12],
  s,
  [20, 12],
  s,
  [21, 12],
  s,
  [9, 29],
  s,
  [10, 29],
  s,
  [11, 29],
  c,
  [178, 12],
  s,
  [13, 29],
  s,
  [3, 14],
  s,
  [6, 29],
  s,
  [7, 29],
  s,
  [8, 29],
  c,
  [697, 14],
  125,
  c,
  [710, 22],
  s,
  [62, 12],
  s,
  [63, 12],
  s,
  [64, 12],
  s,
  [65, 12],
  128,
  28,
  c,
  [62, 12],
  73,
  101,
  102,
  26,
  134,
  101,
  102,
  136,
  c,
  [3, 3],
  138,
  139,
  s,
  [81, 18],
  140,
  c,
  [874, 8],
  142,
  c,
  [888, 3],
  109,
  109,
  146,
  s,
  [78, 18],
  c,
  [873, 36],
  c,
  [12, 60],
  s,
  [44, 12],
  s,
  [45, 12],
  c,
  [36, 12],
  s,
  [38, 12],
  s,
  [39, 12],
  s,
  [40, 12],
  s,
  [41, 12],
  c,
  [60, 12],
  s,
  [34, 12],
  s,
  [35, 12],
  c,
  [36, 12],
  s,
  [30, 12],
  s,
  [31, 12],
  c,
  [36, 12],
  s,
  [24, 12],
  s,
  [25, 12],
  s,
  [26, 12],
  s,
  [27, 12],
  c,
  [60, 12],
  s,
  [23, 28],
  c,
  [40, 12],
  161,
  162,
  163,
  s,
  [67, 4],
  164,
  165,
  s,
  [77, 18],
  72,
  70,
  70,
  s,
  [66, 3],
  93,
  74,
  s,
  [90, 18],
  171,
  169,
  166,
  173,
  172,
  174,
  c,
  [456, 7],
  94,
  25,
  176,
  s,
  [79, 18],
  s,
  [80, 18],
  s,
  [119, 12],
  c,
  [514, 8],
  177,
  179,
  s,
  [105, 14],
  111,
  111,
  180,
  115,
  s,
  [72, 3],
  181,
  s,
  [57, 5],
  96,
  57,
  57,
  55,
  55,
  97,
  s,
  [55, 6],
  53,
  53,
  98,
  s,
  [53, 7],
  51,
  51,
  99,
  s,
  [51, 8],
  s,
  [49, 8],
  101,
  102,
  s,
  [49, 3],
  47,
  47,
  104,
  105,
  s,
  [47, 6],
  106,
  107,
  s,
  [47, 8],
  s,
  [43, 10],
  109,
  110,
  s,
  [43, 10],
  37,
  37,
  112,
  113,
  s,
  [37, 20],
  s,
  [33, 4],
  c,
  [1199, 4],
  s,
  [33, 20],
  s,
  [29, 28],
  182,
  183,
  93,
  c,
  [337, 12],
  s,
  [12, 29],
  s,
  [75, 18],
  s,
  [68, 4],
  s,
  [76, 18],
  185,
  186,
  171,
  169,
  187,
  c,
  [294, 8],
  s,
  [87, 3],
  c,
  [97, 12],
  c,
  [23, 5],
  83,
  83,
  23,
  83,
  24,
  25,
  s,
  [84, 3],
  s,
  [96, 18],
  c,
  [55, 7],
  95,
  25,
  s,
  [97, 18],
  193,
  s,
  [106, 14],
  s,
  [114, 12],
  195,
  c,
  [99, 12],
  s,
  [15, 29],
  s,
  [16, 29],
  197,
  93,
  s,
  [91, 18],
  198,
  199,
  s,
  [88, 3],
  s,
  [89, 3],
  c,
  [153, 5],
  86,
  86,
  23,
  86,
  24,
  25,
  101,
  102,
  134,
  c,
  [14, 5],
  82,
  82,
  23,
  82,
  24,
  25,
  s,
  [113, 12],
  201,
  116,
  s,
  [59, 5],
  s,
  [17, 29],
  s,
  [92, 18],
  s,
  [93, 18],
  s,
  [85, 3],
  c,
  [320, 8],
  203,
  c,
  [9, 8],
  204,
  205,
  206,
  s,
  [118, 12],
  s,
  [117, 12]
])
}),
defaultActions: {
  146: 115,
  195: 116
},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
        hash.destroy();             // destroy... well, *almost*!
        // assert('recoverable' in hash);
    } else {
        throw new this.JisonParserError(str, hash);
    }
},
parse: function parse(input) {
    var self = this,
        stack = new Array(128),         // token stack: stores token which leads to state at the same index (column storage)
        sstack = new Array(128),        // state stack: stores states (column storage)

        vstack = new Array(128),        // semantic value stack
        lstack = new Array(128),        // location stack
        table = this.table,
        sp = 0;                         // 'stack pointer': index into the stacks

    var recovering = 0;                 // (only used when the grammar contains error recovery rules)
    var TERROR = this.TERROR,
        EOF = this.EOF,
        ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, table.length /* ensures that anyone using this new state will fail dramatically! */];

    //this.reductionCount = this.shiftCount = 0;

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState = {
      yy: {
        parseError: null,
        quoteName: null,
        lexer: null,
        parser: null,
        pre_parse: null,
        post_parse: null
      }
    };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;






    lexer.setInput(input, sharedState.yy);

    if (typeof lexer.yylloc === 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack[sp] = yyloc;
    vstack[sp] = null;
    sstack[sp] = 0;
    stack[sp] = 0;
    ++sp;

    if (typeof lexer.yytext === 'undefined') {
        lexer.yytext = '';
    }
    var yytext = lexer.yytext;
    if (typeof lexer.yylineno === 'undefined') {
        lexer.yylineno = 0;
    }




    var ranges = lexer.options && lexer.options.ranges;

    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState.yy.quoteName === 'function') {
        this.quoteName = sharedState.yy.quoteName;
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods) {
        var rv;

        if (invoke_post_methods) {
            if (sharedState.yy.post_parse) {
                rv = sharedState.yy.post_parse.call(this, sharedState.yy, resultValue);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState.yy, resultValue);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // prevent lingering circular references from causing memory leaks:
        if (sharedState.yy) {
            sharedState.yy.parseError = undefined;
            sharedState.yy.quoteName = undefined;
            sharedState.yy.lexer = undefined;
            sharedState.yy.parser = undefined;
            if (lexer.yy === sharedState.yy) {
                lexer.yy = undefined;
            }
        }
        sharedState.yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;
        lstack.length = 0;
        vstack.length = 0;
        stack_pointer = 0;

        return resultValue;
    };

    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        return {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,
            loc: lexer.yylloc,
            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,
            location_stack: lstack,
            stack_pointer: sp,
            yy: sharedState.yy,
            lexer: lexer,

            // and make sure the error info doesn't stay due to potential ref cycle via userland code manipulations (memory leak opportunity!):
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key !== 'function') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
    };


    function lex() {
        var token = lexer.lex();
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token || EOF;
    }


    var symbol = 0;
    var preErrorSymbol = 0;
    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined
    };
    var p, len, this_production;
    var lstack_begin, lstack_end;
    var newState;
    var retval = false;


    // Return the rule stack depth where the nearest error rule can be found.
    // Return -1 when no error recovery rule was found.
    function locateNearestErrorRecoveryRule(state) {
        var stack_probe = sp - 1;
        var depth = 0;

        // try to recover from error
        for (;;) {
            // check for error recovery rule in this state
            var t = table[state][TERROR] || NO_ACTION;
            if (t[0]) {
                return depth;
            }
            if (state === 0 /* $accept rule */ || stack_probe < 1) {
                return -1; // No suitable error recovery rule available.
            }
            --stack_probe; // popStack(1): [symbol, action]
            state = sstack[stack_probe];
            ++depth;
        }
    }

    try {
        this.__reentrant_call_depth++;

        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState.yy);
        }
        if (sharedState.yy.pre_parse) {
            sharedState.yy.pre_parse.call(this, sharedState.yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];




                // handle parse error
                if (!action) {
                    // first see if there's any chance at hitting an error recovery rule:
                    var error_rule_depth = locateNearestErrorRecoveryRule(state);
                    var errStr = null;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    if (!recovering) {
                        // Report error
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ':\n' + lexer.showPosition(79 - 10, 10) + '\n';
                        } else {
                            errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        }
                        if (expected.length) {
                            errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                        } else {
                            errStr += 'Unexpected ' + errSymbolDescr;
                        }
                        p = this.constructParseErrorInfo(errStr, null, expected, (error_rule_depth >= 0));
                        r = this.parseError(p.errStr, p);


                        if (!p.recoverable) {
                            retval = r;
                            break;
                        } else {
                            // TODO: allow parseError callback to edit symbol and or state tat the start of the error recovery process...
                        }
                    }



                    // just recovered from another error
                    if (recovering === ERROR_RECOVERY_TOKEN_DISCARD_COUNT && error_rule_depth >= 0) {
                        // only barf a fatal hairball when we're out of look-ahead symbols and none hit a match;
                        // this DOES discard look-ahead while recovering from an error when said look-ahead doesn't
                        // suit the error recovery rules... The error HAS been reported already so we're fine with
                        // throwing away a few items if that is what it takes to match the nearest recovery rule!
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            p = this.constructParseErrorInfo((errStr || 'Parsing halted while starting to recover from another error.'), null, expected, false);
                            retval = this.parseError(p.errStr, p);
                            break;
                        }

                        // discard current lookahead and grab another

                        yytext = lexer.yytext;

                        yyloc = lexer.yylloc;

                        symbol = lex();


                    }

                    // try to recover from error
                    if (error_rule_depth < 0) {
                        p = this.constructParseErrorInfo((errStr || 'Parsing halted. No suitable error recovery rule available.'), null, expected, false);
                        retval = this.parseError(p.errStr, p);
                        break;
                    }
                    sp -= error_rule_depth;

                    preErrorSymbol = (symbol === TERROR ? 0 : symbol); // save the lookahead token
                    symbol = TERROR;            // insert generic error symbol as new lookahead
                    // allow N (default: 3) real symbols to be shifted before reporting a new error
                    recovering = ERROR_RECOVERY_TOKEN_DISCARD_COUNT;

                    newState = sstack[sp - 1];



                    continue;
                }
            }


            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo(('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol), null, null, false);
                    retval = this.parseError(p.errStr, p);
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                retval = this.parseError(p.errStr, p);
                break;

            // shift:
            case 1:
                //this.shiftCount++;
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;
                lstack[sp] = lexer.yylloc;
                sstack[sp] = newState; // push state
                ++sp;
                symbol = 0;
                if (!preErrorSymbol) { // normal execution / no error
                    // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:

                    yytext = lexer.yytext;

                    yyloc = lexer.yylloc;

                    if (recovering > 0) {
                        recovering--;

                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error, *unless* that drops us straight back into error mode:
                    symbol = preErrorSymbol;
                    preErrorSymbol = 0;

                    // read action for current state and first input
                    t = (table[newState] && table[newState][symbol]) || NO_ACTION;
                    if (!t[0]) {
                        // forget about that symbol and move forward: this wasn't a 'forgot to insert' error type where
                        // (simple) stuff might have been missing before the token which caused the error we're
                        // recovering from now...

                        symbol = 0;
                    }
                }

                continue;

            // reduce:
            case 2:
                //this.reductionCount++;
                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                len = this_production[1];
                lstack_end = sp;
                lstack_begin = lstack_end - (len || 1);
                lstack_end--;



                // Make sure subsequent `$$ = $1` default action doesn't fail
                // for rules where len==0 as then there's no $1 (you're reducing an epsilon rule then!)
                //
                // Also do this to prevent nasty action block codes to *read* `$0` or `$$`
                // and *not* get `undefined` as a result for their efforts!
                vstack[sp] = undefined;

                // perform semantic action
                yyval.$ = vstack[sp - len]; // default to $$ = $1; result must produce `undefined` when len == 0, as then there's no $1

                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack_begin].first_line,
                    last_line: lstack[lstack_end].last_line,
                    first_column: lstack[lstack_begin].first_column,
                    last_column: lstack[lstack_end].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack_begin].range[0], lstack[lstack_end].range[1]];
                }

                r = this.performAction.call(yyval, yytext, yyloc, sharedState.yy, newState, sp - 1, vstack, lstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= len;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;
                lstack[sp] = yyval._$;
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;

                continue;

            // accept:
            case 3:
                retval = true;
                // Return the `$accept` rule's `$$` result, if available.
                //
                // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                // default, action):
                //
                //     $accept: <startSymbol> $end
                //                  %{ $$ = $1; @$ = @1; %}
                //
                // which, combined with the parse kernel's `$accept` state behaviour coded below,
                // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                //
                // In code:
                //
                //                  %{
                //                      @$ = @1;            // if location tracking support is included
                //                      if (typeof $1 !== 'undefined')
                //                          return $1;
                //                      else
                //                          return true;           // the default parse result if the rule actions don't produce anything
                //                  %}
                if (typeof yyval.$ !== 'undefined') {
                    retval = yyval.$;
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too:
        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = this.parseError(p.errStr, p);
    } finally {
        retval = this.cleanupAfterParse(retval, true);
        this.__reentrant_call_depth--;
    }

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;

class ASTNode {
  constructor(rangeOrLocation, properties) {
    if (Array.isArray(rangeOrLocation)) {
      this.range = rangeOrLocation;
    } else {
      this.range = [
        parser.lexer.sourceMap.sourceLocation([rangeOrLocation.first_line - 1, rangeOrLocation.first_column]),
        parser.lexer.sourceMap.sourceLocation([rangeOrLocation.last_line - 1, rangeOrLocation.last_column])
      ];
    }
    Object.assign(this, properties);
  }
}

class Identifier extends ASTNode {}

class NumberLiteral extends ASTNode {
  constructor(rangeOrLocation, properties) {
    super(rangeOrLocation, properties);
    this.value = /^0[Xx]/.test(this.string) ? parseInt(this.string, 16) : Number(this.string);
  }
}
class StringLiteral extends ASTNode {}

class ArrayMember extends ASTNode {}
class OpcodeExpression extends ASTNode {}

class UnaryPlus extends ASTNode {}
class UnaryMinus extends ASTNode {}
class BitwiseComplement extends ASTNode {}
class Not extends ASTNode {}
class UnaryOperation extends ASTNode {
  get operator() { return this.children[0]; }
}

class Multiplication extends ASTNode {}
class Division extends ASTNode {}
class Power extends ASTNode {}
class Modulus extends ASTNode {}
class Plus extends ASTNode {}
class Minus extends ASTNode {}
class LeftShift extends ASTNode {}
class RightShift extends ASTNode {}

class LessThan extends ASTNode {}
class GreaterThan extends ASTNode {}
class LessThanOrEqual extends ASTNode {}
class GreaterThanOrEqual extends ASTNode {}
class Equal extends ASTNode {}
class NotEqual extends ASTNode {}
class BitwiseAND extends ASTNode {}
class BitwiseXOR extends ASTNode {}
class BitwiseOR extends ASTNode {}
class And extends ASTNode {}
class Or extends ASTNode {}

class BinaryOperation extends ASTNode {
  get operator() { return this.children[1]; }
}

class TestAndBodyNode extends ASTNode {
  get test() { return this.children[0]; }
  get body() { return this.children[1]; }
}

class ConditionalExpression extends TestAndBodyNode {
  get else() { return this.children[2]; }
}

class LabeledStatement extends ASTNode {
  constructor(rangeOrLocation, properties) {
    super(rangeOrLocation, properties);
    this.children[0] = parser.lexer.nameFromLabel(this.children[0]);
  }
  get label() { return this.children[0]; }
  get statement() { return this.children[1]; }
}

class ArrayDeclarator extends ASTNode {}
class Assignment extends ASTNode {}
class CompoundAssignment extends ASTNode {}
class ArgumentList extends ASTNode {}
class VoidOpcodeStatement extends ASTNode {}
class OpcodeStatement extends VoidOpcodeStatement {}

class Goto extends ASTNode {
  get label() { return this.children[0]; }
}

class If extends TestAndBodyNode {
  get else() { return this.children[2]; }
}
class Then extends ASTNode {}
class Else extends ASTNode {}

class While extends TestAndBodyNode {}
class Until extends TestAndBodyNode {}
class Do extends ASTNode {}

class Empty extends ASTNode {}

class InstrumentNumberAndNameList extends ASTNode {}
class Instrument extends ASTNode {
  get numberAndNameList() { return this.children[0]; }
}

class OpcodeOutputTypeSignature extends ASTNode {}
class OpcodeInputTypeSignature extends ASTNode {}
class Opcode extends ASTNode {
  get name() { return this.children[0]; }
  get outputTypes() { return this.children[1]; }
  get inputTypes() { return this.children[2]; }
}

class Orchestra extends ASTNode {}

Object.assign(parser, {
  Identifier: Identifier,
  NumberLiteral: NumberLiteral,
  StringLiteral: StringLiteral,

  ArrayMember: ArrayMember,
  OpcodeExpression: OpcodeExpression,

  UnaryPlus: UnaryPlus,
  UnaryMinus: UnaryMinus,
  BitwiseComplement: BitwiseComplement,
  Not: Not,
  UnaryOperation: UnaryOperation,

  Multiplication: Multiplication,
  Division: Division,
  Power: Power,
  Modulus: Modulus,
  Plus: Plus,
  Minus: Minus,
  LeftShift: LeftShift,
  RightShift: RightShift,
  LessThan: LessThan,
  GreaterThan: GreaterThan,
  LessThanOrEqual: LessThanOrEqual,
  GreaterThanOrEqual: GreaterThanOrEqual,
  Equal: Equal,
  NotEqual: NotEqual,
  BitwiseAND: BitwiseAND,
  BitwiseXOR: BitwiseXOR,
  BitwiseOR: BitwiseOR,
  And: And,
  Or: Or,
  BinaryOperation: BinaryOperation,

  ConditionalExpression: ConditionalExpression,

  LabeledStatement: LabeledStatement,
  ArrayDeclarator: ArrayDeclarator,
  Assignment: Assignment,
  CompoundAssignment: CompoundAssignment,
  ArgumentList: ArgumentList,
  VoidOpcodeStatement: VoidOpcodeStatement,
  OpcodeStatement: OpcodeStatement,
  Goto: Goto,
  If: If,
  Then: Then,
  Else: Else,
  While: While,
  Until: Until,
  Do: Do,
  Empty: Empty,

  InstrumentNumberAndNameList: InstrumentNumberAndNameList,
  Instrument: Instrument,

  OpcodeOutputTypeSignature: OpcodeOutputTypeSignature,
  OpcodeInputTypeSignature: OpcodeInputTypeSignature,
  Opcode: Opcode,

  Orchestra: Orchestra
});

class CsoundParserError extends Error {
  constructor(lintMessage) {
    super(lintMessage.text);
    this.name = 'CsoundParserError';
    this.lintMessage = lintMessage;
  }
}

parser.messages = [];

const original_originalParseError = parser.originalParseError;
parser.originalParseError = (function(str, hash, lintMessage) {
  if (arguments.length >= 3)
    throw new CsoundParserError(lintMessage);
  original_originalParseError.apply(this, arguments);
}).bind(parser);

module.exports = parser;
/* generated by jison-lex 0.3.4-153 */
var lexer = (function () {
// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonLexerError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

    if (typeof Object.setPrototypeOf === 'function') {
        Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
    } else {
        JisonLexerError.prototype = Object.create(Error.prototype);
    }
    JisonLexerError.prototype.constructor = JisonLexerError;
    JisonLexerError.prototype.name = 'JisonLexerError';


var lexer = {
    EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        // <-- injected by the code generator

    // options: {},                             // <-- injected by the code generator

    // yy: ...,                                 // <-- injected by setInput()

    __currentRuleSet__: null,                   // <-- internal rule set cache for the current lexer state

    parseError: function lexer_parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

    // clear the lexer token context; intended for internal use only
    clear: function lexer_clear() {
        this.yytext = '';
        this.yyleng = 0;
        this.match = '';
        this.matches = false;
        this._more = false;
        this._backtrack = false;
    },

    // resets the lexer, sets new input
    setInput: function lexer_setInput(input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this.clear();
        this._signaled_error_token = this.done = false;
        this.yylineno = 0;
        this.matched = '';
        this.conditionStack = ['INITIAL'];
        this.__currentRuleSet__ = null;
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

    // consumes and returns one char from the input
    input: function lexer_input() {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

    // unshifts one char (or a string) into the input
    unput: function lexer_unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

    // When called from action, caches matched text and appends it on next action
    more: function lexer_more() {
        this._more = true;
        return this;
    },

    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    reject: function lexer_reject() {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            this._signaled_error_token = (this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR);
        }
        return this;
    },

    // retain first n characters of the match
    less: function lexer_less(n) {
        return this.unput(this.match.slice(n));
    },

    // return (part of the) already matched input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    pastInput: function lexer_pastInput(maxSize, maxLines) {
        var past = this.matched.substring(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = past.length;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substr` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        past = past.substr(-maxSize * 2 - 2);
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = past.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(-maxLines);
        past = a.join('\n');
        // When, after limiting to maxLines, we still have to much to return, 
        // do add an ellipsis prefix...
        if (past.length > maxSize) {
            past = '...' + past.substr(-maxSize);
        }
        return past;
    },

    // return (part of the) upcoming input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = maxSize;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substring` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        if (next.length < maxSize * 2 + 2) {
            next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8
        }
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = next.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(0, maxLines);
        next = a.join('\n');
        // When, after limiting to maxLines, we still have to much to return, 
        // do add an ellipsis postfix...
        if (next.length > maxSize) {
            next = next.substring(0, maxSize) + '...';
        }
        return next;
    },

    // return a string which displays the character position where the lexing error occurred, i.e. for error messages
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
        var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    // helper function, used to produce a human readable description as a string, given
    // the input `yylloc` location object. 
    // Set `display_range_too` to TRUE to include the string character inex position(s)
    // in the description if the `yylloc.range` is available. 
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
        var l1 = yylloc.first_line;
        var l2 = yylloc.last_line;
        var o1 = yylloc.first_column;
        var o2 = yylloc.last_column - 1;
        var dl = l2 - l1;
        var d_o = (dl === 0 ? o2 - o1 : 1000);
        var rv;
        if (dl === 0) {
            rv = 'line ' + l1 + ', ';
            if (d_o === 0) {
                rv += 'column ' + o1;
            } else {
                rv += 'columns ' + o1 + ' .. ' + o2;
            }
        } else {
            rv = 'lines ' + l1 + '(column ' + o1 + ') .. ' + l2 + '(column ' + o2 + ')';
        }
        if (yylloc.range && display_range_too) {
            var r1 = yylloc.range[0];
            var r2 = yylloc.range[1] - 1;
            if (r2 === r1) {
                rv += ' {String Offset: ' + r1 + '}';
            } else {
                rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
        }
        return rv;
        // return JSON.stringify(yylloc);
    },

    // test the lexed token: return FALSE when not a match, otherwise return token.
    //
    // `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
    // contains the actually matched text string.
    //
    // Also move the input cursor forward and update the match collectors:
    // - yytext
    // - yyleng
    // - match
    // - matches
    // - yylloc
    // - offset
    test_match: function lexer_test_match(match, indexed_rule) {
        var token,
            lines,
            backup,
            match_str;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        match_str = match[0];
        lines = match_str.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match_str.length
        };
        this.yytext += match_str;
        this.match += match_str;
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        // previous lex rules MAY have invoked the `more()` API rather than producing a token:
        // those rules will already have moved this `offset` forward matching their match lengths,
        // hence we must only add our own match length now:
        this.offset += match_str.length;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match_str.length);
        this.matched += match_str;
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            this.__currentRuleSet__ = null;
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

    // return next match in input
    next: function lexer_next() {
        if (this.done) {
            this.clear();
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.clear();
        }
        var rules = this.__currentRuleSet__;
        if (!rules) {
            // Update the ruleset cache as we apparently encountered a state change or just started lexing.
            // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
            // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
            // speed up those activities a tiny bit.
            rules = this.__currentRuleSet__ = this._currentRules();
        }
        for (var i = 0, len = rules.length; i < len; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = undefined;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            this.clear();
            this.done = true;
            return this.EOF;
        } else {
            token = this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: this.match + this._input,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                lexer: this
            }) || this.ERROR;
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

    // return next match that has a token
    lex: function lexer_lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

    // backwards compatible alias for `pushState()`;
    // the latter is symmetrical with `popState()` and we advise to use
    // those APIs in any modern lexer code, rather than `begin()`.
    begin: function lexer_begin(condition) {
        return this.pushState(condition);
    },

    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    pushState: function lexer_pushState(condition) {
        this.conditionStack.push(condition);
        this.__currentRuleSet__ = null;
        return this;
    },

    // pop the previously active lexer condition state off the condition stack
    popState: function lexer_popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            this.__currentRuleSet__ = null;
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    topState: function lexer_topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

    // (internal) determine the lexer rule set which is active for the currently active lexer condition state
    _currentRules: function lexer__currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions['INITIAL'].rules;
        }
    },

    // return the number of states currently on the stack
    stateStackSize: function lexer_stateStackSize() {
        return this.conditionStack.length;
    },
options: {
  flex: true
},
JisonLexerError: JisonLexerError,
performAction: function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 1 : 
/*! Conditions:: * */ 
/*! Rule::       {whitespace} */ 
 // Do nothing 
break;
case 43 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       fi */ 
 
  this.messages.push({
    type: 'Warning',
    text: `${this.quote(yy_.yytext)} instead of ${this.quote('endif')} used to end if statement`,
    range: this.rangeFromLocation(yy_.yylloc)
  });
  return 93;
 
break;
case 48 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       enduntil */ 
 
  this.messages.push({
    type: 'Warning',
    text: `${this.quote(yy_.yytext)} instead of ${this.quote('od')} used to end loop`,
    range: this.rangeFromLocation(yy_.yylloc)
  });
  return 98;
 
break;
case 52 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       ^{optional_whitespace}\w+:(?:{whitespace}|\n|$) */ 
 
  const labelName = this.nameFromLabel(yy_.yytext);
  const label = this.symbolTable.labels[labelName];
  if (label) {
    this.messages.push({
      type: 'Warning',
      text: `Duplicate label ${this.quote(labelName)} ignored`,
      range: this.sourceMap.sourceRange([
        [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
        [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + labelName.length]
      ]),
      trace: [{
        type: 'Trace',
        text: `Label ${this.quote(labelName)} is defined here`,
        range: label.range
      }]
    });
  } else {
    this.symbolTable.addLabel(labelName, this.sourceMap.sourceRange([
      [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
      [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + labelName.length]
    ]));
  }
  return 68;
 
break;
case 53 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       instr */ 
 
  this.begin('after_instr_keyword');
  return 104;
 
break;
case 55 : 
/*! Conditions:: after_instr_keyword */ 
/*! Rule::       {decimal_integer} */ 
 
  this.popState();
  this.begin('after_instrument_number_or_identifier');
  return 33;
 
break;
case 56 : 
/*! Conditions:: after_instr_keyword */ 
/*! Rule::       {identifier} */ 
 
  this.popState();
  this.begin('after_instrument_number_or_identifier');
  return 25;
 
break;
case 57 : 
/*! Conditions:: after_instr_keyword */ 
/*! Rule::       \+ */ 
 
  this.popState();
  this.begin('after_instrument_plus_sign');
  return 7;
 
break;
case 58 : 
/*! Conditions:: after_instr_keyword */ 
/*! Rule::       . */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected instrument number or identifier',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 59 : 
/*! Conditions:: after_instrument_number_or_identifier */ 
/*! Rule::       ,{optional_whitespace_and_newline} */ 
 
  this.popState();
  this.begin('after_instr_keyword');
  return 22;
 
break;
case 60 : 
/*! Conditions:: after_instrument_number_or_identifier */ 
/*! Rule::       \n */ 
 
  this.popState();
  return 79;
 
break;
case 61 : 
/*! Conditions:: after_instrument_number_or_identifier */ 
/*! Rule::       [^,\n] */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected newline after instrument numbers and identifiers',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 62 : 
/*! Conditions:: after_instrument_plus_sign */ 
/*! Rule::       {identifier} */ 
 
  this.popState();
  this.begin('after_instrument_number_or_identifier');
  return 25;
 
break;
case 63 : 
/*! Conditions:: after_instrument_plus_sign */ 
/*! Rule::       . */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected instrument identifier',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 64 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       opcode */ 
 
  this.begin('after_opcode_keyword');
  return 29;
 
break;
case 66 : 
/*! Conditions:: after_opcode_keyword */ 
/*! Rule::       {identifier} */ 
 
  this.popState();
  this.opcodeName = yy_.yytext;
  this.begin('after_opcode_name');
  return 25;
 
break;
case 67 : 
/*! Conditions:: after_opcode_keyword */ 
/*! Rule::       . */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected opcode name',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 68 : 
/*! Conditions:: after_opcode_name */ 
/*! Rule::       ,{optional_whitespace_and_newline} */ 
 
  this.popState();
  this.begin('before_opcode_output_type_signature');
  return 22;
 
break;
case 69 : 
/*! Conditions:: after_opcode_name */ 
/*! Rule::       [^,] */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected comma after opcode name',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 70 : 
/*! Conditions:: before_opcode_output_type_signature */ 
/*! Rule::       0|(?:[aikftSK](?:\\[\\])*)+ */ 
 
  this.popState();
  this.opcodeOutputTypeSignature = (yy_.yytext === '0') ? '' : yy_.yytext;
  this.begin('after_opcode_output_type_signature');
  return 107;
 
break;
case 71 : 
/*! Conditions:: before_opcode_output_type_signature */ 
/*! Rule::       . */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected output type signature',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 72 : 
/*! Conditions:: after_opcode_output_type_signature */ 
/*! Rule::       ,{optional_whitespace_and_newline} */ 
 
  this.popState();
  this.begin('before_opcode_input_type_signature');
  return 22;
 
break;
case 73 : 
/*! Conditions:: after_opcode_output_type_signature */ 
/*! Rule::       [^,] */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected comma after output type signature',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 74 : 
/*! Conditions:: before_opcode_input_type_signature */ 
/*! Rule::       0|(?:[aijkftKOJVPopS](?:\\[\\])*)+ */ 
 
  this.popState();
  this.symbolTable.addOpcode(this.opcodeName, {[(yy_.yytext === '0') ? '' : yy_.yytext]: [this.opcodeOutputTypeSignature]});
  return 109;
 
break;
case 75 : 
/*! Conditions:: before_opcode_input_type_signature */ 
/*! Rule::       . */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: 'Expected input type signature',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 80 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       {identifier} */ 
 
  const symbol = this.symbolTable.identifiers[yy_.yytext];
  if (symbol && symbol.kind === 'opcode') {
    if (symbol.isVoid)
      return 31;

    const character = this.input();
    if (character === ':')
      this.begin('opcode_output_type_annotation');
    else
      this.unput(character);
    return 29;
  }

  return 25;
 
break;
case 81 : 
/*! Conditions:: opcode_output_type_annotation */ 
/*! Rule::       [ak] */ 
 
  this.popState();
  return 41;
 
break;
case 82 : 
/*! Conditions:: opcode_output_type_annotation */ 
/*! Rule::       [^ak] */ 
 
  throw new CsoundLexerError({
    type: 'Error',
    text: `Expected output type (${this.quote('a')} or ${this.quote('k')})`,
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 84 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 
  this.messages.push({
    type: 'Error',
    text: `Unexpected character ${this.quote(yy_.yytext)}`,
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 85 : 
/*! Conditions:: INITIAL */ 
/*! Rule::       . */ 
 console.log(yy_.yytext); 
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

  /*! Conditions:: INITIAL */ 
  /*! Rule::       \n */ 
   0 : 79,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \({optional_whitespace_and_newline} */ 
   2 : 3,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \) */ 
   3 : 4,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \[{optional_whitespace_and_newline} */ 
   4 : 5,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \] */ 
   5 : 6,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \+{optional_whitespace_and_newline} */ 
   6 : 7,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -{optional_whitespace_and_newline} */ 
   7 : 8,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \*{optional_whitespace_and_newline} */ 
   8 : 11,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \/{optional_whitespace_and_newline} */ 
   9 : 12,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       %{optional_whitespace_and_newline} */ 
   10 : 14,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \^{optional_whitespace_and_newline} */ 
   11 : 13,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \?{optional_whitespace_and_newline} */ 
   12 : 20,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       : */ 
   13 : 21,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ,{optional_whitespace_and_newline} */ 
   14 : 22,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       !{optional_whitespace_and_newline} */ 
   15 : 10,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -> */ 
   16 : '->',
  /*! Conditions:: INITIAL */ 
  /*! Rule::       !={optional_whitespace_and_newline} */ 
   17 : 58,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       &&{optional_whitespace_and_newline} */ 
   18 : 64,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \|\|{optional_whitespace_and_newline} */ 
   19 : 66,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       <<{optional_whitespace_and_newline} */ 
   20 : 49,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       >>{optional_whitespace_and_newline} */ 
   21 : 50,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       <{optional_whitespace_and_newline} */ 
   22 : 15,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       <={optional_whitespace_and_newline} */ 
   23 : 53,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       =={optional_whitespace_and_newline} */ 
   24 : 57,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \+={optional_whitespace_and_newline} */ 
   25 : 71,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       -={optional_whitespace_and_newline} */ 
   26 : 72,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \*={optional_whitespace_and_newline} */ 
   27 : 73,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \/={optional_whitespace_and_newline} */ 
   28 : 74,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ={optional_whitespace_and_newline} */ 
   29 : 23,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       >{optional_whitespace_and_newline} */ 
   30 : 16,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       >={optional_whitespace_and_newline} */ 
   31 : 54,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       \|{optional_whitespace_and_newline} */ 
   32 : 19,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       &{optional_whitespace_and_newline} */ 
   33 : 17,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       #{optional_whitespace_and_newline} */ 
   34 : 18,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       [~¬]{optional_whitespace_and_newline} */ 
   35 : 9,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       if */ 
   36 : 92,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       then */ 
   37 : 84,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       ithen */ 
   38 : 84,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       kthen */ 
   39 : 84,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       elseif */ 
   40 : 87,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       else */ 
   41 : 89,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       endif */ 
   42 : 93,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       until */ 
   44 : 99,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       while */ 
   45 : 97,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       do */ 
   46 : 95,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       od */ 
   47 : 98,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       goto */ 
   49 : 82,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       igoto */ 
   50 : 82,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       kgoto */ 
   51 : 82,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       endin */ 
   54 : 105,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       endop */ 
   65 : 111,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {hexadecimal_integer} */ 
   76 : 35,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {decimal_integer} */ 
   77 : 33,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       {decimal_number} */ 
   78 : 35,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       0dbfs|A4|k(?:r|smps)|nchnls(?:_i)?|sr */ 
   79 : 27,
  /*! Conditions:: INITIAL */ 
  /*! Rule::       "(\\.|[^"])*"|\{\{(?:[^}]|\}[^}])*\}\} */ 
   83 : 36
},
rules: [
/^(?:\n)/,
/^(?:([\t ]+))/,
/^(?:\(((?:[\t ]*)\n?))/,
/^(?:\))/,
/^(?:\[((?:[\t ]*)\n?))/,
/^(?:\])/,
/^(?:\+((?:[\t ]*)\n?))/,
/^(?:-((?:[\t ]*)\n?))/,
/^(?:\*((?:[\t ]*)\n?))/,
/^(?:\/((?:[\t ]*)\n?))/,
/^(?:%((?:[\t ]*)\n?))/,
/^(?:\^((?:[\t ]*)\n?))/,
/^(?:\?((?:[\t ]*)\n?))/,
/^(?::)/,
/^(?:,((?:[\t ]*)\n?))/,
/^(?:!((?:[\t ]*)\n?))/,
/^(?:->)/,
/^(?:!=((?:[\t ]*)\n?))/,
/^(?:&&((?:[\t ]*)\n?))/,
/^(?:\|\|((?:[\t ]*)\n?))/,
/^(?:<<((?:[\t ]*)\n?))/,
/^(?:>>((?:[\t ]*)\n?))/,
/^(?:<((?:[\t ]*)\n?))/,
/^(?:<=((?:[\t ]*)\n?))/,
/^(?:==((?:[\t ]*)\n?))/,
/^(?:\+=((?:[\t ]*)\n?))/,
/^(?:-=((?:[\t ]*)\n?))/,
/^(?:\*=((?:[\t ]*)\n?))/,
/^(?:\/=((?:[\t ]*)\n?))/,
/^(?:=((?:[\t ]*)\n?))/,
/^(?:>((?:[\t ]*)\n?))/,
/^(?:>=((?:[\t ]*)\n?))/,
/^(?:\|((?:[\t ]*)\n?))/,
/^(?:&((?:[\t ]*)\n?))/,
/^(?:#((?:[\t ]*)\n?))/,
/^(?:[~¬]((?:[\t ]*)\n?))/,
/^(?:if)/,
/^(?:then)/,
/^(?:ithen)/,
/^(?:kthen)/,
/^(?:elseif)/,
/^(?:else)/,
/^(?:endif)/,
/^(?:fi)/,
/^(?:until)/,
/^(?:while)/,
/^(?:do)/,
/^(?:od)/,
/^(?:enduntil)/,
/^(?:goto)/,
/^(?:igoto)/,
/^(?:kgoto)/,
/^(?:^([\t ]*)\w+:(?:([\t ]+)|\n|$))/,
/^(?:instr)/,
/^(?:endin)/,
/^(?:(\d+))/,
/^(?:([^\W\d]\w*))/,
/^(?:\+)/,
/^(?:.)/,
/^(?:,((?:[\t ]*)\n?))/,
/^(?:\n)/,
/^(?:[^,\n])/,
/^(?:([^\W\d]\w*))/,
/^(?:.)/,
/^(?:opcode)/,
/^(?:endop)/,
/^(?:([^\W\d]\w*))/,
/^(?:.)/,
/^(?:,((?:[\t ]*)\n?))/,
/^(?:[^,])/,
/^(?:0|(?:[aikftSK](?:\\[\\])*)+)/,
/^(?:.)/,
/^(?:,((?:[\t ]*)\n?))/,
/^(?:[^,])/,
/^(?:0|(?:[aijkftKOJVPopS](?:\\[\\])*)+)/,
/^(?:.)/,
/^(?:(0[Xx][\dA-Fa-f]+))/,
/^(?:(\d+))/,
/^(?:(\d+\.?\d*(?:(?:[Ee])(?:[-+]?(?:\d+)))?|\.\d+(?:(?:[Ee])(?:[-+]?(?:\d+)))?))/,
/^(?:0dbfs|A4|k(?:r|smps)|nchnls(?:_i)?|sr)/,
/^(?:([^\W\d]\w*))/,
/^(?:[ak])/,
/^(?:[^ak])/,
/^(?:"(\\.|[^"])*"|\{\{(?:[^}]|\}[^}])*\}\})/,
/^(?:.)/,
/^(?:.)/
],
conditions: {
  "opcode_output_type_annotation": {
    rules: [
      1,
      81,
      82
    ],
    inclusive: false
  },
  "before_opcode_input_type_signature": {
    rules: [
      1,
      74,
      75
    ],
    inclusive: false
  },
  "after_opcode_output_type_signature": {
    rules: [
      1,
      72,
      73
    ],
    inclusive: false
  },
  "before_opcode_output_type_signature": {
    rules: [
      1,
      70,
      71
    ],
    inclusive: false
  },
  "after_opcode_name": {
    rules: [
      1,
      68,
      69
    ],
    inclusive: false
  },
  "after_opcode_keyword": {
    rules: [
      1,
      66,
      67
    ],
    inclusive: false
  },
  "after_instrument_plus_sign": {
    rules: [
      1,
      62,
      63
    ],
    inclusive: false
  },
  "after_instrument_number_or_identifier": {
    rules: [
      1,
      59,
      60,
      61
    ],
    inclusive: false
  },
  "after_instr_keyword": {
    rules: [
      1,
      55,
      56,
      57,
      58
    ],
    inclusive: false
  },
  "INITIAL": {
    rules: [
      0,
      1,
      2,
      3,
      4,
      5,
      6,
      7,
      8,
      9,
      10,
      11,
      12,
      13,
      14,
      15,
      16,
      17,
      18,
      19,
      20,
      21,
      22,
      23,
      24,
      25,
      26,
      27,
      28,
      29,
      30,
      31,
      32,
      33,
      34,
      35,
      36,
      37,
      38,
      39,
      40,
      41,
      42,
      43,
      44,
      45,
      46,
      47,
      48,
      49,
      50,
      51,
      52,
      53,
      54,
      64,
      65,
      76,
      77,
      78,
      79,
      80,
      83,
      84,
      85
    ],
    inclusive: true
  }
}
};

lexer.nameFromLabel = label => label.trim().replace(/:$/, '');

lexer.quote = string => `‘${string}’`;

lexer.rangeFromLocation = (function(yylloc) {
  return [
    this.sourceMap.sourceLocation([yylloc.first_line - 1, yylloc.first_column]),
    this.sourceMap.sourceLocation([yylloc.last_line - 1, yylloc.last_column])
  ];
}).bind(lexer);

lexer.rangeFromPosition = (function(line, column) {
  const lineMinus1 = line - 1;
  return [
    this.sourceMap.sourceLocation([lineMinus1, column]),
    this.sourceMap.sourceLocation([lineMinus1, column])
  ];
}).bind(lexer);

const original_setInput = lexer.setInput;
lexer.setInput = (function(input, yy) {
  this.messages = [];
  this.sourceMap = {
    sourceLocation: location => location,
    sourceRange: range => range
  };
  const SymbolTable = require(require('path').join(__dirname, 'symbol-table.js'));
  this.symbolTable = new SymbolTable();
  return original_setInput.apply(this, arguments);
}).bind(lexer);

class CsoundLexerError extends Error {
  constructor(lintMessage) {
    super(lintMessage.text);
    this.name = 'CsoundLexerError';
    this.lintMessage = lintMessage;
  }
};
return lexer;
})();
parser.lexer = lexer;

function Parser() {
  this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

return new Parser();
})();




if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.parser = orchestraParser;
  exports.Parser = orchestraParser.Parser;
  exports.parse = function () {
    return orchestraParser.parse.apply(orchestraParser, arguments);
  };

}

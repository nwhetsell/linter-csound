/* generated by jison-lex 0.3.4-161 */
var preprocessor = (function () {
// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonLexerError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) { // V8
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
} else {
    JisonLexerError.prototype = Object.create(Error.prototype);
}
JisonLexerError.prototype.constructor = JisonLexerError;
JisonLexerError.prototype.name = 'JisonLexerError';


var lexer = {
    EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        // <-- injected by the code generator

    // options: {},                             // <-- injected by the code generator

    // yy: ...,                                 // <-- injected by setInput()

    __currentRuleSet__: null,                   // <-- internal rule set cache for the current lexer state

    __error_infos: [],                          // INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup

    __decompressed: false,                      // INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use

    done: false,                                // INTERNAL USE ONLY
    _backtrack: false,                          // INTERNAL USE ONLY
    _input: '',                                 // INTERNAL USE ONLY
    _more: false,                               // INTERNAL USE ONLY
    _signaled_error_token: false,               // INTERNAL USE ONLY

    conditionStack: [],                         // INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`

    match: '',                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
    matched: '',                                // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
    matches: false,                             // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
    yytext: '',                                 // ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
    offset: 0,                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
    yyleng: 0,                                  // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
    yylineno: 0,                                // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
    yylloc: null,                               // READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction

    // INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable) {
        var pei = {
            errStr: msg,
            recoverable: !!recoverable,
            text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
            token: null,
            line: this.yylineno,
            loc: this.yylloc,
            yy: this.yy,
            lexer: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructLexErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    },

    parseError: function lexer_parseError(str, hash) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
            return this.yy.parser.parseError(str, hash) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
            return this.yy.parseError.call(this, str, hash) || this.ERROR;
        } else {
            throw new this.JisonLexerError(str);
        }
    },

    // final cleanup function for when we have completed lexing the input; 
    // make it an API so that external code can use this one once userland
    // code has decided it's time to destroy any lingering lexer error
    // hash object instances and the like: this function helps to clean
    // up these constructs, which *may* carry cyclic references which would
    // otherwise prevent the instances from being properly and timely
    // garbage-collected, i.e. this function helps prevent memory leaks!
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
        var rv;

        // prevent lingering circular references from causing memory leaks:
        this.setInput('', {});

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;
        }

        return this;
    },

    // clear the lexer token context; intended for internal use only
    clear: function lexer_clear() {
        this.yytext = '';
        this.yyleng = 0;
        this.match = '';
        this.matches = false;
        this._more = false;
        this._backtrack = false;
    },

    // resets the lexer, sets new input
    setInput: function lexer_setInput(input, yy) {
        this.yy = yy || this.yy || {};

        // also check if we've fully initialized the lexer instance,
        // including expansion work to be done to go from a loaded
        // lexer to a usable lexer:
        if (!this.__decompressed) {
          // step 1: decompress the regex list:
          var rules = this.rules;
          for (var i = 0, len = rules.length; i < len; i++) {
            var rule_re = rules[i];

            // compression: is the RE an xref to another RE slot in the rules[] table?
            if (typeof rule_re === 'number') {
              rules[i] = rules[rule_re];
            }
          }

          // step 2: unfold the conditions[] set to make these ready for use:
          var conditions = this.conditions;
          for (var k in conditions) {
            var spec = conditions[k];

            var rule_ids = spec.rules;

            var len = rule_ids.length;
            var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
            var rule_new_ids = new Array(len + 1);

            if (this.rules_prefix1) {
                var rule_prefixes = new Array(65536);
                var first_catch_all_index = 0;

                for (var i = 0; i < len; i++) {
                  var idx = rule_ids[i];
                  var rule_re = rules[idx];
                  rule_regexes[i + 1] = rule_re;
                  rule_new_ids[i + 1] = idx;

                  var prefix = this.rules_prefix1[idx];
                  // compression: is the PREFIX-STRING an xref to another PREFIX-STRING slot in the rules_prefix1[] table?
                  if (typeof prefix === 'number') {
                    prefix = this.rules_prefix1[prefix];
                  }
                  // init the prefix lookup table: first come, first serve...
                  if (!prefix) {
                    if (!first_catch_all_index) {
                      first_catch_all_index = i + 1;
                    }
                  } else {
                    for (var j = 0, pfxlen = prefix.length; j < pfxlen; j++) {
                      var pfxch = prefix.charCodeAt(j);
                      // first come, first serve:
                      if (!rule_prefixes[pfxch]) {
                        rule_prefixes[pfxch] = i + 1;
                      }  
                    }
                  }
                }

                // if no catch-all prefix has been encountered yet, it means all
                // rules have limited prefix sets and it MAY be that particular
                // input characters won't be recognized by any rule in this 
                // condition state.
                // 
                // To speed up their discovery at run-time while keeping the
                // remainder of the lexer kernel code very simple (and fast),
                // we point these to an 'illegal' rule set index *beyond*
                // the end of the rule set.
                if (!first_catch_all_index) {
                  first_catch_all_index = len + 1;
                }

                for (var i = 0; i < 65536; i++) {
                  if (!rule_prefixes[i]) {
                    rule_prefixes[i] = first_catch_all_index; 
                  }
                }

                spec.__dispatch_lut = rule_prefixes;
            } else {
                for (var i = 0; i < len; i++) {
                  var idx = rule_ids[i];
                  var rule_re = rules[idx];
                  rule_regexes[i + 1] = rule_re;
                  rule_new_ids[i + 1] = idx;
                }
            }

            spec.rules = rule_new_ids;
            spec.__rule_regexes = rule_regexes;
            spec.__rule_count = len;
          }

          this.__decompressed = true;
        }

        this._input = input || '';
        this.clear();
        this._signaled_error_token = false;
        this.done = false;
        this.yylineno = 0;
        this.matched = '';
        this.conditionStack = ['INITIAL'];
        this.__currentRuleSet__ = null;
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    },

    // consumes and returns one char from the input
    input: function lexer_input() {
        if (!this._input) {
            this.done = true;
            return null;
        }
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        // Count the linenumber up when we hit the LF (or a stand-alone CR).
        // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
        // and we advance immediately past the LF as well, returning both together as if
        // it was all a single 'character' only.
        var slice_len = 1;
        var lines = false;
        if (ch === '\n') {
            lines = true;
        } else if (ch === '\r') {
            lines = true;
            var ch2 = this._input[1];
            if (ch2 === '\n') {
                slice_len++;
                ch += ch2;
                this.yytext += ch2;
                this.yyleng++;
                this.offset++;
                this.match += ch2;
                this.matched += ch2;
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
            }
        }
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(slice_len);
        return ch;
    },

    // unshifts one char (or a string) into the input
    unput: function lexer_unput(ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - len);
        this.matched = this.matched.substr(0, this.matched.length - len);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }

        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = (lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len);

        if (this.options.ranges) {
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng - len;
        }
        this.yyleng = this.yytext.length;
        this.done = false;
        return this;
    },

    // When called from action, caches matched text and appends it on next action
    more: function lexer_more() {
        this._more = true;
        return this;
    },

    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    reject: function lexer_reject() {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            // when the parseError() call returns, we MUST ensure that the error is registered.
            // We accomplish this by signaling an 'error' token to be produced for the current
            // .lex() run.
            var p = this.constructLexErrorInfo('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), false);
            this._signaled_error_token = (this.parseError(p.errStr, p) || this.ERROR);
        }
        return this;
    },

    // retain first n characters of the match
    less: function lexer_less(n) {
        return this.unput(this.match.slice(n));
    },

    // return (part of the) already matched input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    pastInput: function lexer_pastInput(maxSize, maxLines) {
        var past = this.matched.substring(0, this.matched.length - this.match.length);
        if (maxSize < 0)
            maxSize = past.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = past.length;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substr` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        past = past.substr(-maxSize * 2 - 2);
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = past.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(-maxLines);
        past = a.join('\n');
        // When, after limiting to maxLines, we still have too much to return, 
        // do add an ellipsis prefix...
        if (past.length > maxSize) {
            past = '...' + past.substr(-maxSize);
        }
        return past;
    },

    // return (part of the) upcoming input, i.e. for error messages.
    // Limit the returned string length to `maxSize` (default: 20).
    // Limit the returned string to the `maxLines` number of lines of input (default: 1).
    // Negative limit values equal *unlimited*.
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
        var next = this.match;
        if (maxSize < 0)
            maxSize = next.length + this._input.length;
        else if (!maxSize)
            maxSize = 20;
        if (maxLines < 0)
            maxLines = maxSize;         // can't ever have more input lines than this!
        else if (!maxLines)
            maxLines = 1;
        // `substring` anticipation: treat \r\n as a single character and take a little
        // more than necessary so that we can still properly check against maxSize
        // after we've transformed and limited the newLines in here:
        if (next.length < maxSize * 2 + 2) {
            next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8
        }
        // now that we have a significantly reduced string to process, transform the newlines
        // and chop them, then limit them:
        var a = next.replace(/\r\n|\r/g, '\n').split('\n');
        a = a.slice(0, maxLines);
        next = a.join('\n');
        // When, after limiting to maxLines, we still have too much to return, 
        // do add an ellipsis postfix...
        if (next.length > maxSize) {
            next = next.substring(0, maxSize) + '...';
        }
        return next;
    },

    // return a string which displays the character position where the lexing error occurred, i.e. for error messages
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
        var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
        var c = new Array(pre.length + 1).join('-');
        return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    // helper function, used to produce a human readable description as a string, given
    // the input `yylloc` location object. 
    // Set `display_range_too` to TRUE to include the string character index position(s)
    // in the description if the `yylloc.range` is available. 
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
        var l1 = yylloc.first_line;
        var l2 = yylloc.last_line;
        var o1 = yylloc.first_column;
        var o2 = yylloc.last_column - 1;
        var dl = l2 - l1;
        var d_o = (dl === 0 ? o2 - o1 : 1000);
        var rv;
        if (dl === 0) {
            rv = 'line ' + l1 + ', ';
            if (d_o === 0) {
                rv += 'column ' + o1;
            } else {
                rv += 'columns ' + o1 + ' .. ' + o2;
            }
        } else {
            rv = 'lines ' + l1 + '(column ' + o1 + ') .. ' + l2 + '(column ' + o2 + ')';
        }
        if (yylloc.range && display_range_too) {
            var r1 = yylloc.range[0];
            var r2 = yylloc.range[1] - 1;
            if (r2 === r1) {
                rv += ' {String Offset: ' + r1 + '}';
            } else {
                rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
        }
        return rv;
        // return JSON.stringify(yylloc);
    },

    // test the lexed token: return FALSE when not a match, otherwise return token.
    //
    // `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
    // contains the actually matched text string.
    //
    // Also move the input cursor forward and update the match collectors:
    // - yytext
    // - yyleng
    // - match
    // - matches
    // - yylloc
    // - offset
    test_match: function lexer_test_match(match, indexed_rule) {
        var token,
            lines,
            backup,
            match_str;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        match_str = match[0];
        lines = match_str.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match_str.length
        };
        this.yytext += match_str;
        this.match += match_str;
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset + this.yyleng];
        }
        // previous lex rules MAY have invoked the `more()` API rather than producing a token:
        // those rules will already have moved this `offset` forward matching their match lengths,
        // hence we must only add our own match length now:
        this.offset += match_str.length;
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match_str.length);
        this.matched += match_str;

        // calling this method: 
        //
        //   function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {...}
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1] /* = YY_START */);
        // otherwise, when the action codes are all simple return token statements:
        //token = this.simpleCaseActionClusters[indexed_rule];

        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            this.__currentRuleSet__ = null;
            return false; // rule action called reject() implying the next rule should be tested instead.
        } else if (this._signaled_error_token) {
            // produce one 'error' token as .parseError() in reject() did not guarantee a failure signal by throwing an exception!
            token = this._signaled_error_token;
            this._signaled_error_token = false;
            return token;
        }
        return false;
    },

    // return next match in input
    next: function lexer_next() {
        if (this.done) {
            this.clear();
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.clear();
        }
        var spec = this.__currentRuleSet__;
        if (!spec) {
            // Update the ruleset cache as we apparently encountered a state change or just started lexing.
            // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
            // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
            // speed up those activities a tiny bit.
            spec = this.__currentRuleSet__ = this._currentRules();
        }

        var rule_ids = spec.rules;
//        var dispatch = spec.__dispatch_lut;
        var regexes = spec.__rule_regexes;
        var len = spec.__rule_count;

//        var c0 = this._input[0];

        // Note: the arrays are 1-based, while `len` itself is a valid index, 
        // hence the non-standard less-or-equal check in the next loop condition!
        // 
        // `dispatch` is a lookup table which lists the *first* rule which matches the 1-char *prefix* of the rule-to-match.
        // By using that array as a jumpstart, we can cut down on the otherwise O(n*m) behaviour of this lexer, down to
        // O(n) ideally, where:
        // 
        // - N is the number of input particles -- which is not precisely characters 
        //   as we progress on a per-regex-match basis rather than on a per-character basis
        //   
        // - M is the number of rules (regexes) to test in the active condition state.
        //  
        for (var i = 1 /* (dispatch[c0] || 1) */ ; i <= len; i++) {
            tempMatch = this._input.match(regexes[i]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rule_ids[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = undefined;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rule_ids[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === '') {
            this.done = true;
            return this.EOF;
        } else {
            var p = this.constructLexErrorInfo('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), this.options.lexer_errors_are_recoverable);
            token = (this.parseError(p.errStr, p) || this.ERROR);
            if (token === this.ERROR) {
                // we can try to recover from a lexer error that parseError() did not 'recover' for us, by moving forward at least one character at a time:
                if (!this.match.length) {
                    this.input();
                }
            }
            return token;
        }
    },

    // return next match that has a token
    lex: function lexer_lex() {
        var r;
        // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
        if (typeof this.options.pre_lex === 'function') {
            r = this.options.pre_lex.call(this);
        }
        while (!r) {
            r = this.next();
        }
        if (typeof this.options.post_lex === 'function') {
            // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
        }
        return r;
    },

    // backwards compatible alias for `pushState()`;
    // the latter is symmetrical with `popState()` and we advise to use
    // those APIs in any modern lexer code, rather than `begin()`.
    begin: function lexer_begin(condition) {
        return this.pushState(condition);
    },

    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    pushState: function lexer_pushState(condition) {
        this.conditionStack.push(condition);
        this.__currentRuleSet__ = null;
        return this;
    },

    // pop the previously active lexer condition state off the condition stack
    popState: function lexer_popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            this.__currentRuleSet__ = null;
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    topState: function lexer_topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return 'INITIAL';
        }
    },

    // (internal) determine the lexer rule set which is active for the currently active lexer condition state
    _currentRules: function lexer__currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
        } else {
            return this.conditions['INITIAL'];
        }
    },

    // return the number of states currently on the stack
    stateStackSize: function lexer_stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
JisonLexerError: JisonLexerError,
performAction: function lexer__performAction(yy, yy_, $avoiding_name_collisions, YY_START) {

var YYSTATE = YY_START;
switch($avoiding_name_collisions) {
case 0 : 
/*! Conditions:: INITIAL quoted_string */ 
/*! Rule::       {line_continuation} */ 
 
  this.currentTextNode = null;
  for (let i = yy_.yyleng - 1; i > 0; i--) {
    const character = yy_.yytext.charAt(i);
    if (character !== '\n' && character !== '\r') {
      this.messages.push({
        type: 'Warning',
        filePath: this.filePath,
        text: 'Line continuation is not followed immediately by newline',
        range: [
          [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
          [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + 1]
        ]
      });
      break;
    }
  }
 
break;
case 1 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       \/\* */ 
 
  this.begin('block_comment');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
  this.addText(' ');
 
break;
case 2 : 
/*! Conditions:: block_comment */ 
/*! Rule::       \/\* */ 
 
  this.messages.push({
    type: 'Warning',
    filePath: this.filePath,
    text: `${this.quote(yy_.yytext)} in block comment`,
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 3 : 
/*! Conditions:: block_comment */ 
/*! Rule::       \*\/ */ 
 
  this.startRanges.pop();
  this.popState();
 
break;
case 4 : 
/*! Conditions:: block_comment */ 
/*! Rule::       .|{newline} */ 
 // Do nothing 
break;
case 5 : 
/*! Conditions:: block_comment */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: 'Unterminated block comment',
    range: this.startRanges.pop()
  });
 
break;
case 6 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {single_line_comment} */ 
 this.addNewline(); 
break;
case 7 : 
/*! Conditions:: quoted_string braced_string */ 
/*! Rule::       \\[^abfnrtv"\\\\] */ 
 
  this.addText(yy_.yytext);
  this.messages.push({
    type: 'Warning',
    filePath: this.filePath,
    text: `Unknown escape sequence ${this.quote(yy_.yytext)}`,
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 8 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       " */ 
 
  this.begin('quoted_string');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
  this.addText(yy_.yytext);
 
break;
case 9 : 
/*! Conditions:: quoted_string */ 
/*! Rule::       \\.|[^$"\n\r] */ 
 this.addText(yy_.yytext); 
break;
case 10 : 
/*! Conditions:: quoted_string */ 
/*! Rule::       " */ 
 
  this.startRanges.pop();
  this.popState();
  this.addText(yy_.yytext);
 
break;
case 11 : 
/*! Conditions:: quoted_string */ 
/*! Rule::       {newline}|$ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: `Missing terminating ${this.quote('"')}`,
    range: this.startRanges.pop()
  });
 
break;
case 12 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       \{\{ */ 
 
  this.begin('braced_string');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
  this.addText(yy_.yytext);
 
break;
case 13 : 
/*! Conditions:: braced_string */ 
/*! Rule::       (?:[^}]|\}[^}])+ */ 
 this.addText(yy_.yytext); 
break;
case 14 : 
/*! Conditions:: braced_string */ 
/*! Rule::       \}\} */ 
 
  this.startRanges.pop();
  this.popState();
  this.addText(yy_.yytext);
 
break;
case 15 : 
/*! Conditions:: braced_string */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: `Missing terminating ${this.quote('}}')}`,
    range: this.startRanges.pop()
  });
 
break;
case 16 : 
/*! Conditions:: INITIAL quoted_string */ 
/*! Rule::       {macro_use}\( */ 
 
  let i = yy_.yyleng - 2;
  if (yy_.yytext.charAt(i) === '.') {
    this.messages.push({
      type: 'Warning',
      filePath: this.filePath,
      text: `Unnecessary ${this.quote('.')} after macro name`,
      range: [
        [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i],
        [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i + 1]
      ]
    });
  } else {
    i++;
  }
  this.macroUse = new MacroUseElement(this.getMacro(yy_.yytext.substring(1, i)), [
    [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
    [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i]
  ]);
  this.begin('macro_parameter_value_list');
 
break;
case 17 : 
/*! Conditions:: macro_parameter_value_list */ 
/*! Rule::       [^'#)] */ 
 
  this.unput(yy_.yytext);
  this.begin('macro_parameter_value');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
  this.macroParameterValue = '';
 
break;
case 18 : 
/*! Conditions:: macro_parameter_value_list */ 
/*! Rule::       ['#)] */ 
 
  {
    const macrosByName = this.macroUse.macrosByName;
    const parameterNameIndex = Object.keys(macrosByName).length;
    const macro = this.macroUse.macro;
    if (parameterNameIndex >= macro.parameterNames.length) {
      throw new CsoundPreprocessorError({
        type: 'Error',
        filePath: this.filePath,
        text: 'Too many arguments provided to function-like macro',
        range: [
          this.startRanges.pop()[0],
          [yy_.yylloc.last_line - 1, yy_.yylloc.last_column - 1]
        ],
        trace: [{
          type: 'Trace',
          filePath: this.filePath,
          text: `Macro ${this.quote(macro.name)} defined here`,
          range: macro.range
        }]
      });
    }
    const macroName = macro.parameterNames[parameterNameIndex];
    macrosByName[macroName] = {
      name: macroName,
      body: this.macroParameterValue
    };
    if (yy_.yytext === ')') {
      this.startRanges.pop();
      this.popState();
      this.expandMacro(YY_START);
    } else if (yy_.yytext !== "'") {
      this.messages.push({
        type: 'Warning',
        filePath: this.filePath,
        text: `${this.quote(yy_.yytext)} instead of single quote used to separate macro parameters`,
        range: this.rangeFromLocation(yy_.yylloc)
      });
    }
  }
 
break;
case 19 : 
/*! Conditions:: macro_parameter_value */ 
/*! Rule::       [^'#)] */ 
 
  this.macroParameterValue += yy_.yytext;
  if (yy_.yytext === '(')
    this.begin('macro_parameter_value_parenthetical');
 
break;
case 20 : 
/*! Conditions:: macro_parameter_value */ 
/*! Rule::       ['#)] */ 
 
  this.unput(yy_.yytext);
  this.popState();
 
break;
case 21 : 
/*! Conditions:: macro_parameter_value_parenthetical */ 
/*! Rule::       [^()] */ 
 
  this.macroParameterValue += yy_.yytext;
 
break;
case 22 : 
/*! Conditions:: macro_parameter_value_parenthetical */ 
/*! Rule::       \( */ 
 
  this.macroParameterValue += yy_.yytext;
  this.begin('macro_parameter_value_parenthetical');
 
break;
case 23 : 
/*! Conditions:: macro_parameter_value_parenthetical */ 
/*! Rule::       \) */ 
 
  this.macroParameterValue += yy_.yytext;
  this.popState();
 
break;
case 24 : 
/*! Conditions:: INITIAL quoted_string */ 
/*! Rule::       {macro_use} */ 
 
  {
    let i = yy_.yyleng - 1;
    if (yy_.yytext.charAt(i) === '.') {
      const character = this.input();
      this.unput(character);
      // This needs to be kept synchronized with the macro name patterns.
      if (!/\w/.test(character)) {
        this.messages.push({
          type: 'Warning',
          filePath: this.filePath,
          text: `Unnecessary ${this.quote('.')} after macro name`,
          range: [
            [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i],
            [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i + 1]
          ]
        });
      }
    } else {
      i++;
    }
    this.macroUse = new MacroUseElement(this.getMacro(yy_.yytext.substring(1, i)), this.rangeFromLocation(yy_.yylloc));
    this.expandMacro(YY_START);
  }
 
break;
case 25 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {define} */ 
 
  this.begin('define_directive');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
 
break;
case 26 : 
/*! Conditions:: define_directive */ 
/*! Rule::       {identifier}\(? */ 
 
  this.popState();
  const newMacro = {body: ''};
  const lastCharacterIndex = yy_.yyleng - 1;
  if (yy_.yytext.charAt(lastCharacterIndex) === '(') {
    this.begin('macro_parameter_name_list');
    this.startRanges.push([
      [yy_.yylloc.last_line - 1, yy_.yylloc.last_column - 1],
      [yy_.yylloc.last_line - 1, yy_.yylloc.last_column]
    ]);
    newMacro.name = yy_.yytext.substr(0, lastCharacterIndex);
    newMacro.parameterNames = [];
    newMacro.range = [
      [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
      [yy_.yylloc.last_line - 1, yy_.yylloc.last_column - 1]
    ];
  } else {
    this.begin('before_macro_body');
    newMacro.name = yy_.yytext;
    newMacro.range = this.rangeFromLocation(yy_.yylloc);
  }
  const macro = this.macrosByName[newMacro.name];
  if (macro) {
    const message = {
      type: 'Warning',
      filePath: this.filePath,
      text: `${this.quote(newMacro.name)} macro redefined`,
      range: newMacro.range
    };
    if (macro.range) {
      message.trace = [{
        type: 'Trace',
        filePath: this.filePath,
        text: 'Previous definition is here',
        range: macro.range
      }];
    } else {
      message.text += `, was ${this.quote(macro.body)}`;
    }
    this.messages.push(message);
  }
  this.macro = newMacro;
  this.macrosByName[newMacro.name] = newMacro;
 
break;
case 27 : 
/*! Conditions:: macro_parameter_name_list after_macro_parameter_name_separator */ 
/*! Rule::       {identifier} */ 
 
  const parameterNames = this.macro.parameterNames;
  if (parameterNames.indexOf(yy_.yytext) >= 0) {
    throw new CsoundPreprocessorError({
      type: 'Error',
      filePath: this.filePath,
      text: `Duplicate macro parameter name ${this.quote(yy_.yytext)}`,
      range: this.rangeFromLocation(yy_.yylloc)
    });
  }
  parameterNames.push(yy_.yytext);
  if ('after_macro_parameter_name_separator' === YY_START)
    this.popState();
  this.begin('after_macro_parameter_name');
 
break;
case 28 : 
/*! Conditions:: macro_parameter_name_list */ 
/*! Rule::       \) */ 
 
  this.startRanges.pop();
  this.begin('before_macro_body');
 
break;
case 29 : 
/*! Conditions:: macro_parameter_name_list after_macro_parameter_name_separator */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 30 : 
/*! Conditions:: macro_parameter_name_list after_macro_parameter_name_separator */ 
/*! Rule::       . */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Expected macro parameter name',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 31 : 
/*! Conditions:: macro_parameter_name_list */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: `Missing terminating ${this.quote(')')}`,
    range: this.startRanges.pop()
  });
 
break;
case 32 : 
/*! Conditions:: after_macro_parameter_name */ 
/*! Rule::       ['#] */ 
 
  if (yy_.yytext !== "'") {
    this.messages.push({
      type: 'Warning',
      filePath: this.filePath,
      text: `${this.quote(yy_.yytext)} instead of single quote used to separate macro parameters`,
      range: this.rangeFromLocation(yy_.yylloc)
    });
  }
  this.popState()
  this.begin('after_macro_parameter_name_separator');
 
break;
case 33 : 
/*! Conditions:: after_macro_parameter_name */ 
/*! Rule::       \) */ 
 
  this.popState();
  this.popState();
  this.begin('before_macro_body');
 
break;
case 34 : 
/*! Conditions:: after_macro_parameter_name */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 35 : 
/*! Conditions:: after_macro_parameter_name */ 
/*! Rule::       . */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Expected single quote in macro parameter list',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 36 : 
/*! Conditions:: before_macro_body */ 
/*! Rule::       # */ 
 
  this.popState();
  this.begin('macro_body');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
 
break;
case 37 : 
/*! Conditions:: before_macro_body */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 38 : 
/*! Conditions:: before_macro_body */ 
/*! Rule::       [^#]|$ */ 
 
  const message = {
    type: 'Error',
    filePath: this.filePath,
    text: `Expected ${this.quote('#')} after macro name`,
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  };
  if (yy_.yytext.length > 0)
    throw new CsoundPreprocessorError(message);
  this.messages.push(message);
 
break;
case 39 : 
/*! Conditions:: macro_body */ 
/*! Rule::       \\# */ 
 this.macro.body += '#'; 
break;
case 40 : 
/*! Conditions:: macro_body */ 
/*! Rule::       [^#] */ 
 this.macro.body += yy_.yytext; 
break;
case 41 : 
/*! Conditions:: macro_body */ 
/*! Rule::       # */ 
 
  this.startRanges.pop();
  this.popState();
  this.addText(' ');
 
break;
case 42 : 
/*! Conditions:: macro_body */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: `Missing terminating ${this.quote('#')}`,
    range: this.startRanges.pop()
  });
 
break;
case 43 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {undef} */ 
 
  this.begin('undef_directive');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
 
break;
case 44 : 
/*! Conditions:: undef_directive */ 
/*! Rule::       {identifier} */ 
 
  this.startRanges.pop();
  this.popState();
  if (this.macrosByName[yy_.yytext]) {
    delete this.macrosByName[yy_.yytext];
  } else {
    this.messages.push({
      type: 'Error',
      filePath: this.filePath,
      text: `${this.quote(yy_.yytext)} macro is not defined`,
      range: this.rangeFromLocation(yy_.yylloc)
    });
  }
 
break;
case 45 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {ifdef_or_ifndef} */ 
 
  this.begin(yy_.yytext.startsWith('#ifdef') ? 'ifdef_directive' : 'ifndef_directive');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
 
break;
case 46 : 
/*! Conditions:: ifdef_directive */ 
/*! Rule::       {identifier} */ 
 this.popState(); this.begin(this.macrosByName[yy_.yytext] ? 'ifdef_true' : 'ifdef_false'); 
break;
case 47 : 
/*! Conditions:: ifndef_directive */ 
/*! Rule::       {identifier} */ 
 this.popState(); this.begin(!this.macrosByName[yy_.yytext] ? 'ifdef_true' : 'ifdef_false'); 
break;
case 48 : 
/*! Conditions:: ifdef_true ifdef_false else_true else_false */ 
/*! Rule::       {endif} */ 
 
  this.startRanges.pop();
  this.popState();
 
break;
case 49 : 
/*! Conditions:: else_true else_false */ 
/*! Rule::       {else} */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: '#else after #else',
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 50 : 
/*! Conditions:: ifdef_true */ 
/*! Rule::       {else} */ 
 this.popState(); this.begin('else_false'); 
break;
case 51 : 
/*! Conditions:: ifdef_false */ 
/*! Rule::       {else} */ 
 this.popState(); this.begin('else_true'); 
break;
case 52 : 
/*! Conditions:: ifdef_false else_false */ 
/*! Rule::       .|{newline} */ 
 // Do nothing 
break;
case 53 : 
/*! Conditions:: ifdef_true ifdef_false else_true else_false */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: 'Unterminated conditional directive',
    range: this.startRanges.pop()
  });
 
break;
case 54 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {endif} */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: `${yy_.yytext} without #ifdef or #ifndef`,
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 55 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {else} */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: '#else without #ifdef or #ifndef',
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 56 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {include} */ 
 
  this.begin('include_directive');
  this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
 
break;
case 57 : 
/*! Conditions:: include_directive */ 
/*! Rule::       [ \t] */ 
 // Do nothing 
break;
case 58 : 
/*! Conditions:: include_directive */ 
/*! Rule::       [^ \t] */ 
 
  {
    const includeRange = this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column);
    const delimiter = yy_.yytext;
    if (delimiter !== '"') {
      this.messages.push({
        type: 'Warning',
        filePath: this.filePath,
        text: `${this.quote(delimiter)} instead of ${this.quote('"')} used to enclose file path`,
        range: includeRange
      });
    }
    let includeFilePath = '';
    for (let character = this.input(); character !== delimiter; character = this.input()) {
      if (character === '\n' || character === '\r' || !character) {
        throw new CsoundPreprocessorError({
          type: 'Error',
          filePath: this.filePath,
          text: `Missing terminating ${this.quote(delimiter)}`,
          range: includeRange
        });
      }
      includeFilePath += character;
    }
    this.popState();
    if (includeFilePath.length > 0) {
      let paths = [];
      if (path.isAbsolute(includeFilePath)) {
        paths.push(includeFilePath);
      } else {
        // From https://csound.github.io/docs/manual/OrchDirFiles.html, first
        // search the current directory, then the directory of the file being
        // preprocessed. TODO: Then search the directories in INCDIR.
        paths.push(path.resolve());
        if (this.filePath)
          paths.push(path.dirname(this.filePath));
        paths = paths.map(directory => path.join(directory, includeFilePath));
      }
      for (const absolutePath of paths) {
        let stats;
        try {
          stats = fs.statSync(absolutePath);
        } catch (error) {
          continue;
        }
        if (stats.isFile()) {
          if (this.includeDepth === this.maximumIncludeDepth) {
            throw new CsoundPreprocessorError({
              type: 'Error',
              filePath: this.filePath,
              text: '#include nested too deeply',
              range: includeRange
            });
          }
          const preprocessor = this.makePreprocessor(fs.readFileSync(absolutePath, 'utf8'));
          preprocessor.filePath = absolutePath;
          preprocessor.includeDepth = this.includeDepth + 1;
          preprocessor.lex();
          for (const childNode of preprocessor.rootElement.childNodes) {
            this.rootElement.childNodes.push(childNode);
          }
          this.currentTextNode = null;
          return;
        }
      }
      throw new CsoundPreprocessorError({
        type: 'Error',
        filePath: this.filePath,
        text: `${this.quote(includeFilePath)} file not found`,
        range: includeRange
      });
    } else {
      this.messages.push({
        type: 'Warning',
        filePath: this.filePath,
        text: 'Empty file path',
        range: includeRange
      });
    }
  }
 
break;
case 59 : 
/*! Conditions:: include_directive */ 
/*! Rule::       {newline}|$ */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'File path missing',
    range: this.startRanges.pop()
  });
 
break;
case 60 : 
/*! Conditions:: define_directive undef_directive ifdef_directive ifndef_directive */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 61 : 
/*! Conditions:: define_directive undef_directive ifdef_directive ifndef_directive */ 
/*! Rule::       [^\s] */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Macro name must be an identifier',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 62 : 
/*! Conditions:: define_directive undef_directive ifdef_directive ifndef_directive */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: 'Macro name missing',
    range: this.startRanges.pop()
  });
 
break;
case 63 : 
/*! Conditions:: INITIAL macro_parameter_value_list */ 
/*! Rule::       @ */ 
 this.begin('next_power_of_2'); 
break;
case 64 : 
/*! Conditions:: next_power_of_2 */ 
/*! Rule::       @ */ 
 this.popState(); this.begin('next_power_of_2_plus_1'); 
break;
case 65 : 
/*! Conditions:: next_power_of_2 */ 
/*! Rule::       \d+ */ 
 
  this.popState();
  this.addText(Math.pow(2, Math.ceil(Math.log2(Number(yy_.yytext) + 1))).toString());
 
break;
case 66 : 
/*! Conditions:: next_power_of_2_plus_1 */ 
/*! Rule::       \d+ */ 
 
  this.popState();
  this.addText((yy_.yytext === '0') ? '2' : (Math.pow(2, Math.ceil(Math.log2(Number(yy_.yytext)))) + 1).toString());
 
break;
case 67 : 
/*! Conditions:: next_power_of_2 next_power_of_2_plus_1 */ 
/*! Rule::       [ \t]+ */ 
 
  this.messages.push({
    type: 'Warning',
    filePath: this.filePath,
    text: 'Unnecessary whitespace in next-power-of-2 expander',
    range: this.rangeFromLocation(yy_.yylloc)
  });
 
break;
case 68 : 
/*! Conditions:: next_power_of_2 next_power_of_2_plus_1 */ 
/*! Rule::       [^ \t\d]|$ */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Expected integer',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 69 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       \{ */ 
 
  if (this.isScorePreprocessor) {
    this.macro = {body: ''};
    this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
    this.begin('score_loop');
    this.begin('score_loop_after_left_brace');
  } else {
    this.addText(yy_.yytext);
  }
 
break;
case 70 : 
/*! Conditions:: score_loop_after_left_brace */ 
/*! Rule::       [1-9]\d* */ 
 
  this.macro.repeatCount = Number(yy_.yytext);
  this.popState();
  this.begin('score_loop_after_repeat_count');
 
break;
case 71 : 
/*! Conditions:: score_loop_after_left_brace */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 72 : 
/*! Conditions:: score_loop_after_left_brace */ 
/*! Rule::       .|{newline} */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Expected integer greater than 0',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 73 : 
/*! Conditions:: score_loop_after_repeat_count */ 
/*! Rule::       {identifier} */ 
 
  this.macro.repititionMacro = {name: yy_.yytext};
  this.popState();
  this.begin('score_loop_after_repitition_macro_name');
 
break;
case 74 : 
/*! Conditions:: score_loop_after_repeat_count */ 
/*! Rule::       {newline} */ 
 this.popState(); 
break;
case 75 : 
/*! Conditions:: score_loop_after_repeat_count */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 76 : 
/*! Conditions:: score_loop_after_repeat_count */ 
/*! Rule::       . */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Expected macro name',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 77 : 
/*! Conditions:: score_loop_after_repitition_macro_name */ 
/*! Rule::       {newline} */ 
 this.popState(); 
break;
case 78 : 
/*! Conditions:: score_loop_after_repitition_macro_name */ 
/*! Rule::       \s+ */ 
 // Do nothing 
break;
case 79 : 
/*! Conditions:: score_loop_after_repitition_macro_name */ 
/*! Rule::       . */ 
 
  throw new CsoundPreprocessorError({
    type: 'Error',
    filePath: this.filePath,
    text: 'Expected newline',
    range: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
  });
 
break;
case 80 : 
/*! Conditions:: score_loop inner_score_loop */ 
/*! Rule::       \{ */ 
 
  this.macro.body += yy_.yytext;
  this.begin('inner_score_loop');
 
break;
case 81 : 
/*! Conditions:: score_loop */ 
/*! Rule::       \} */ 
 
  const repititionMacro = this.macro.repititionMacro;
  for (let repitition = 1; repitition <= this.macro.repeatCount; repitition++) {
    this.macroUse = new MacroUseElement(this.macro, this.rangeFromLocation(yy_.yylloc));
    if (repititionMacro) {
      repititionMacro.body = repitition.toString();
      this.macroUse.macrosByName[repititionMacro.name] = repititionMacro;
    }
    this.expandMacro(YY_START);
  }
  this.startRanges.pop();
  this.popState();
 
break;
case 82 : 
/*! Conditions:: inner_score_loop */ 
/*! Rule::       \} */ 
 
  this.macro.body += yy_.yytext;
  this.popState();
 
break;
case 83 : 
/*! Conditions:: score_loop inner_score_loop */ 
/*! Rule::       .|{newline} */ 
 this.macro.body += yy_.yytext; 
break;
case 84 : 
/*! Conditions:: score_loop inner_score_loop */ 
/*! Rule::       $ */ 
 
  this.messages.push({
    type: 'Error',
    filePath: this.filePath,
    text: `Missing terminating ${this.quote('}')}`,
    range: this.startRanges.pop()
  });
 
break;
case 85 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       {newline} */ 
 this.addNewline(); 
break;
case 86 : 
/*! Conditions:: else_true ifdef_true ifndef_directive ifdef_directive undef_directive before_macro_body define_directive INITIAL */ 
/*! Rule::       . */ 
 this.addText(yy_.yytext); 
break;
default:
  return this.simpleCaseActionClusters[$avoiding_name_collisions];
}
},
simpleCaseActionClusters: {

},
rules: [
/^(?:(\\[\t ]*(?:;.*)?(?:(?:\n|\r\n?))))/,
/^(?:\/\*)/,
/^(?:\/\*)/,
/^(?:\*\/)/,
/^(?:.|((?:\n|\r\n?)))/,
/^(?:$)/,
/^(?:((?:;|\/\/).*(?:(?:(?:\n|\r\n?))|$)))/,
/^(?:\\[^"\\abfnrtv])/,
/^(?:")/,
/^(?:\\.|[^$"\n\r])/,
/^(?:")/,
/^(?:((?:\n|\r\n?))|$)/,
/^(?:\{\{)/,
/^(?:(?:[^}]|\}[^}])+)/,
/^(?:\}\})/,
/^(?:$)/,
/^(?:(\$(?:[^\W\d]\w*)\.?)\()/,
/^(?:[^'#)])/,
/^(?:['#)])/,
/^(?:[^'#)])/,
/^(?:['#)])/,
/^(?:[^()])/,
/^(?:\()/,
/^(?:\))/,
/^(?:(\$(?:[^\W\d]\w*)\.?))/,
/^(?:(#[\t ]*(?:define)))/,
/^(?:([^\W\d]\w*)\(?)/,
/^(?:([^\W\d]\w*))/,
/^(?:\))/,
/^(?:\s+)/,
/^(?:.)/,
/^(?:$)/,
/^(?:['#])/,
/^(?:\))/,
/^(?:\s+)/,
/^(?:.)/,
/^(?:#)/,
/^(?:\s+)/,
/^(?:[^#]|$)/,
/^(?:\\#)/,
/^(?:[^#])/,
/^(?:#)/,
/^(?:$)/,
/^(?:((?:#undef)))/,
/^(?:([^\W\d]\w*))/,
/^(?:(#ifn?(?:def)))/,
/^(?:([^\W\d]\w*))/,
/^(?:([^\W\d]\w*))/,
/^(?:(#end(?:if)?\b))/,
/^(?:(#else))/,
/^(?:(#else))/,
/^(?:(#else))/,
/^(?:.|((?:\n|\r\n?)))/,
/^(?:$)/,
/^(?:(#end(?:if)?\b))/,
/^(?:(#else))/,
/^(?:((?:#include)))/,
/^(?:[ \t])/,
/^(?:[^ \t])/,
/^(?:((?:\n|\r\n?))|$)/,
/^(?:\s+)/,
/^(?:\S)/,
/^(?:$)/,
/^(?:@)/,
/^(?:@)/,
/^(?:\d+)/,
/^(?:\d+)/,
/^(?:[ \t]+)/,
/^(?:[^ \t\d]|$)/,
/^(?:\{)/,
/^(?:[1-9]\d*)/,
/^(?:\s+)/,
/^(?:.|((?:\n|\r\n?)))/,
/^(?:([^\W\d]\w*))/,
/^(?:((?:\n|\r\n?)))/,
/^(?:\s+)/,
/^(?:.)/,
/^(?:((?:\n|\r\n?)))/,
/^(?:\s+)/,
/^(?:.)/,
/^(?:\{)/,
/^(?:\})/,
/^(?:\})/,
/^(?:.|((?:\n|\r\n?)))/,
/^(?:$)/,
/^(?:((?:\n|\r\n?)))/,
/^(?:.)/
],
conditions: {
  "inner_score_loop": {
    rules: [
      80,
      82,
      83,
      84
    ],
    inclusive: false
  },
  "score_loop_after_repitition_macro_name": {
    rules: [
      77,
      78,
      79
    ],
    inclusive: false
  },
  "score_loop_after_repeat_count": {
    rules: [
      73,
      74,
      75,
      76
    ],
    inclusive: false
  },
  "score_loop_after_left_brace": {
    rules: [
      70,
      71,
      72
    ],
    inclusive: false
  },
  "score_loop": {
    rules: [
      80,
      81,
      83,
      84
    ],
    inclusive: false
  },
  "next_power_of_2_plus_1": {
    rules: [
      66,
      67,
      68
    ],
    inclusive: false
  },
  "next_power_of_2": {
    rules: [
      64,
      65,
      67,
      68
    ],
    inclusive: false
  },
  "macro_parameter_value_parenthetical": {
    rules: [
      21,
      22,
      23
    ],
    inclusive: false
  },
  "macro_parameter_value": {
    rules: [
      19,
      20
    ],
    inclusive: false
  },
  "macro_parameter_value_list": {
    rules: [
      17,
      18,
      63
    ],
    inclusive: false
  },
  "include_directive": {
    rules: [
      57,
      58,
      59
    ],
    inclusive: false
  },
  "else_false": {
    rules: [
      48,
      49,
      52,
      53
    ],
    inclusive: false
  },
  "else_true": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      43,
      45,
      48,
      49,
      53,
      54,
      55,
      56,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "ifdef_false": {
    rules: [
      48,
      51,
      52,
      53
    ],
    inclusive: false
  },
  "ifdef_true": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      43,
      45,
      48,
      50,
      53,
      54,
      55,
      56,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "ifndef_directive": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      43,
      45,
      47,
      54,
      55,
      56,
      60,
      61,
      62,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "ifdef_directive": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      43,
      45,
      46,
      54,
      55,
      56,
      60,
      61,
      62,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "undef_directive": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      43,
      44,
      45,
      54,
      55,
      56,
      60,
      61,
      62,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "macro_body": {
    rules: [
      39,
      40,
      41,
      42
    ],
    inclusive: false
  },
  "before_macro_body": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      36,
      37,
      38,
      43,
      45,
      54,
      55,
      56,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "after_macro_parameter_name_separator": {
    rules: [
      27,
      29,
      30
    ],
    inclusive: false
  },
  "after_macro_parameter_name": {
    rules: [
      32,
      33,
      34,
      35
    ],
    inclusive: false
  },
  "macro_parameter_name_list": {
    rules: [
      27,
      28,
      29,
      30,
      31
    ],
    inclusive: false
  },
  "define_directive": {
    rules: [
      1,
      6,
      8,
      12,
      25,
      26,
      43,
      45,
      54,
      55,
      56,
      60,
      61,
      62,
      69,
      85,
      86
    ],
    inclusive: true
  },
  "braced_string": {
    rules: [
      7,
      13,
      14,
      15
    ],
    inclusive: false
  },
  "quoted_string": {
    rules: [
      0,
      7,
      9,
      10,
      11,
      16,
      24
    ],
    inclusive: false
  },
  "block_comment": {
    rules: [
      2,
      3,
      4,
      5
    ],
    inclusive: false
  },
  "INITIAL": {
    rules: [
      0,
      1,
      6,
      8,
      12,
      16,
      24,
      25,
      43,
      45,
      54,
      55,
      56,
      63,
      69,
      85,
      86
    ],
    inclusive: true
  }
}
};

const fs = require('fs');
const path = require('path');

lexer.addNewline = (function() {
  this.appendToCurrentTextNode('\n');
  this.generatedLineCount++;
  this.generatedColumnCount = 0;
}).bind(lexer);

lexer.addText = (function(text) {
  this.appendToCurrentTextNode(text);
  this.generatedColumnCount += text.length;
}).bind(lexer);

lexer.appendToCurrentTextNode = (function(text) {
  this.sourceMap.add(
    [this.yylloc.first_line - 1, this.yylloc.first_column],
    [this.generatedLineCount, this.generatedColumnCount]
  );
  if (this.currentTextNode) {
    this.currentTextNode.text += text;
  } else {
    this.currentTextNode = new CsoundPreprocessorTextNode(text);
    this.rootElement.childNodes.push(this.currentTextNode);
  }
}).bind(lexer);

lexer.expandMacro = (function(YY_START) {
  const macrosByName = this.macroUse.macrosByName;
  const macro = this.macroUse.macro;
  if (macro.parameterNames && Object.keys(macrosByName).length < macro.parameterNames.length) {
    throw new CsoundPreprocessorError({
      type: 'Error',
      filePath: this.filePath,
      text: 'Too few arguments provided to function-like macro',
      range: lexer.rangeFromPosition(this.yylloc.first_line, this.yylloc.first_column),
      trace: [{
        type: 'Trace',
        filePath: this.filePath,
        text: `Macro ${this.quote(macro.name)} defined here`,
        range: macro.range
      }]
    });
  }
  if (this.expansionDepth === this.maximumExpansionDepth) {
    throw new CsoundPreprocessorError({
      type: 'Error',
      filePath: this.filePath,
      text: 'Macro expanded too deeply',
      range: this.macroUse.range
    });
  }
  const preprocessor = this.makePreprocessor(macro.body);
  preprocessor.expansionDepth = this.expansionDepth + 1;
  preprocessor.filePath = this.filePath;
  Object.assign(preprocessor.macrosByName, macrosByName);
  try {
    preprocessor.lex();
  } catch (error) {
    if (error.lintMessage)
      error.lintMessage.range = this.macroUse.range;
    throw(error);
  }
  this.macroUse.childNodes = preprocessor.rootElement.childNodes;
  this.rootElement.childNodes.push(this.macroUse);
  this.currentTextNode = null;
  if ('quoted_string' === YY_START) {
    this.messages.push({
      type: 'Warning',
      filePath: this.filePath,
      text: `${this.quote(macro.name)} macro expanded in string`,
      range: this.rangeFromLocation(this.yylloc)
    });
  }
}).bind(lexer);

lexer.getMacro = (function(macroName) {
  const macro = this.macrosByName[macroName];
  if (!macro) {
    throw new CsoundPreprocessorError({
      type: 'Error',
      filePath: this.filePath,
      text: `${this.quote(macroName)} is not a macro or macro parameter`,
      range: this.rangeFromLocation(this.yylloc)
    });
  }
  return macro;
}).bind(lexer);

lexer.getOutput = (function() {
  return this.rootElement.getOutput();
}).bind(lexer);

const original_lex = lexer.lex;
lexer.lex = (function() {
  const token = original_lex.apply(this, arguments);
  if (this.done) {
    this.sourceMap.add(
      [this.yylloc.first_line - 1, this.yylloc.first_column + 1],
      [this.generatedLineCount, this.generatedColumnCount]
    );
  }
  return token;
}).bind(lexer);

lexer.makePreprocessor = (function(input) {
  // A function like yy_scan_string is not available in jison-lex. Instead,
  // this function creates a new preprocessor, taking care to avoid getting the
  // current preprocessor in the Node.js module cache.
  delete require.cache[__filename];
  const preprocessor = require(__filename);
  preprocessor.setInput(input);
  Object.assign(preprocessor.macrosByName, this.macrosByName);
  preprocessor.isScorePreprocessor = this.isScorePreprocessor;
  return preprocessor;
}).bind(lexer);

lexer.maximumExpansionDepth = 100;

lexer.maximumIncludeDepth = 100;

lexer.quote = string => `‘${string}’`;

lexer.rangeFromLocation = yylloc => {
  return [
    [yylloc.first_line - 1, yylloc.first_column],
    [yylloc.last_line - 1, yylloc.last_column]
  ];
};

lexer.rangeFromPosition = (line, column) => {
  const lineMinus1 = line - 1;
  return [[lineMinus1, column], [lineMinus1, column]];
};

const original_setInput = lexer.setInput;
lexer.setInput = (function(input, yy) {
  this.currentTextNode = null;
  this.expansionDepth = 0;
  this.includeDepth = 0;
  this.generatedColumnCount = 0;
  this.generatedLineCount = 0;
  // https://github.com/csound/csound/search?q=cs_init_math_constants_macros+path%3AEngine+filename%3Acsound_pre.lex
  this.macrosByName = {
    M_E:        {name: 'M_E',        body: '2.71828182845904523536'},
    M_LOG2E:    {name: 'M_LOG2E',    body: '1.44269504088896340736'},
    M_LOG10E:   {name: 'M_LOG10E',   body: '0.43429448190325182765'},
    M_LN2:      {name: 'M_LN2',      body: '0.69314718055994530942'},
    M_LN10:     {name: 'M_LN10',     body: '2.30258509299404568402'},
    M_PI:       {name: 'M_PI',       body: '3.14159265358979323846'},
    M_PI_2:     {name: 'M_PI_2',     body: '1.57079632679489661923'},
    M_PI_4:     {name: 'M_PI_4',     body: '0.78539816339744830962'},
    M_1_PI:     {name: 'M_1_PI',     body: '0.31830988618379067154'},
    M_2_PI:     {name: 'M_2_PI',     body: '0.63661977236758134308'},
    M_2_SQRTPI: {name: 'M_2_SQRTPI', body: '1.12837916709551257390'},
    M_SQRT2:    {name: 'M_SQRT2',    body: '1.41421356237309504880'},
    M_SQRT1_2:  {name: 'M_SQRT1_2',  body: '0.70710678118654752440'},
    M_INF:      {name: 'M_INF',      body: '800000000000.0'}
  };
  this.messages = [];
  this.rootElement = new CsoundPreprocessorElement();
  this.sourceMap = new SourceMap();
  this.startRanges = [];
  return original_setInput.apply(this, arguments);
}).bind(lexer);

class CsoundPreprocessorTextNode {
  constructor(text) {
    this.text = text;
  }

  getOutput() {
    return this.text;
  }
}

class CsoundPreprocessorElement {
  constructor() {
    this.childNodes = [];
  }

  getOutput() {
    let output = '';
    for (const childNode of this.childNodes) {
      output += childNode.getOutput();
    }
    return output;
  }
}

class MacroUseElement extends CsoundPreprocessorElement {
  constructor(macro, range) {
    super();
    this.macro = macro;
    this.macrosByName = {};
    this.range = range;
  }
}

// The LineMap and SourceMap classes are based on code in CoffeeScript
// <http://coffeescript.org/documentation/docs/sourcemap.html>, which is
// MIT-licensed <https://github.com/jashkenas/coffeescript/blob/master/LICENSE>.

class LineMap {
  constructor(line) {
    this.line = line;
    this.columnMaps = [];
  }

  add(column, sourceLocation) {
    this.columnMaps[column] = {
      line: this.line,
      column: column,
      sourceLine: sourceLocation[0],
      sourceColumn: sourceLocation[1]
    };
  }

  sourceLocation(column) {
    for ( ; column >= 0; column--) {
      const map = this.columnMaps[column];
      if (map)
        return [map.sourceLine, map.sourceColumn];
    }
    return null;
  }
}

class SourceMap {
  constructor(line) {
    this.lineMaps = [];
  }

  add(sourceLocation, generatedLocation) {
    const line = generatedLocation[0];
    let lineMap = this.lineMaps[line];
    if (!lineMap) {
      lineMap = new LineMap(line);
      this.lineMaps[line] = lineMap;
    }
    lineMap.add(generatedLocation[1], sourceLocation);
  }

  sourceLocation(location) {
    for (let line = location[0]; line >= 0; line--) {
      const lineMap = this.lineMaps[line];
      if (lineMap)
        return lineMap.sourceLocation(location[1]);
    }
    return null;
  }

  sourceRange(range) {
    return [this.sourceLocation(range[0]), this.sourceLocation(range[1])];
  }
}

class CsoundPreprocessorError extends Error {
  constructor(lintMessage) {
    super(lintMessage.text);
    this.name = 'CsoundPreprocessorError';
    this.lintMessage = lintMessage;
  }
}

module.exports = lexer;
return lexer;
})();
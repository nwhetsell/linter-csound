/* lexer generated by jison-lex 0.6.1-215 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance.
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired.
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var CsoundPreprocessor = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {

// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: .....................
//   uses yylineno: ...................
//   uses yytext: .....................
//   uses yylloc: .....................
//   uses lexer values: ...............  /
//   location tracking: ...............
//   location assignment: .............
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    __currentRuleSet__: null,                   /// INTERNAL USE ONLY: internal rule set cache for the current lexer state

    __error_infos: [],                          /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup
    __decompressed: false,                      /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use
    done: false,                                /// INTERNAL USE ONLY
    _backtrack: false,                          /// INTERNAL USE ONLY
    _input: '',                                 /// INTERNAL USE ONLY
    _more: false,                               /// INTERNAL USE ONLY
    _signaled_error_token: false,               /// INTERNAL USE ONLY
    conditionStack: [],                         /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`
    match: '',                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
    matched: '',                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
    matches: false,                             /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
    yytext: '',                                 /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
    offset: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
    yyleng: 0,                                  /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
    yylineno: 0,                                /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
    yylloc: null,                               /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     *
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,
        text: this.match,           // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         *
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         *
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     *
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     *
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     *
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     *
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     *
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);             // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse,
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history.
     *
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     *
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface:
     * `function callback(input, cpsArg)`
     *
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     *
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API.
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     *
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        }
        // else: keep `this._input` as is.
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     *
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     *
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously
        // matched lines end up in the array too.
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     *
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     *
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     *
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     *
     * Limit the returned string length to `maxSize` (default: 20).
     *
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     *
     * Negative limit values equal *unlimited*.
     *
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;          // can't ever have more input lines than this!
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     *
     * Limit the returned string length to `maxSize` (default: 20).
     *
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     *
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block.
     * >
     *
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;          // can't ever have more input lines than this!
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);   // substring is faster on Chrome/V8
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     *
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     *
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0;  // loc.last_column;
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced
     * by the given location info range, plus a few lines of context.
     *
     * This function pretty-prints the indicated section of the input, with line numbers
     * and everything!
     *
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     *
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     *
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     *
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     *
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     *
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     *
     * Special Notes:
     *
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     *
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     *
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     *
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;

          if (line.trim().length > 0) {
            nonempty_line_indexes.push(index);
          }
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of error area: limit it
      // to the top and bottom line count:
      if (nonempty_line_indexes.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
        var clip_start = nonempty_line_indexes[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
        var clip_end = nonempty_line_indexes[nonempty_line_indexes.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
        var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
        intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
        rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     *
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     *
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     *
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     *
     * Also move the input cursor forward and update the match collectors:
     *
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     *
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false;  // rule action called reject() implying the next rule should be tested instead.
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     *
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue;  // rule action called reject() implying a rule MISmatch.
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     *
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     *
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     *
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     *
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     *
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     *
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     *
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     *
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     *
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        /*! Conditions:: INITIAL quoted_string macro_parameter_value_quoted_string */
        /*! Rule::       {line_continuation} */
        this.currentTextNode = null;

        for (let i = yy_.yyleng - 1; i > 0; i--) {
          const character = yy_.yytext.charAt(i);

          if (character !== '\n' && character !== '\r') {
            this.messages.push({
              severity: 'warning',

              location: {
                file: this.filePath,

                position: [
                  [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
                  [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + 1]
                ]
              },

              excerpt: 'Line continuation is not followed immediately by newline'
            });

            break;
          }
        }

        break;

      case 1:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       \/\* */
        this.begin('block_comment');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        this.addText(' ');
        break;

      case 2:
        /*! Conditions:: block_comment */
        /*! Rule::       \/\* */
        this.messages.push({
          severity: 'warning',

          location: {
            file: this.filePath,
            position: this.rangeFromLocation(yy_.yylloc)
          },

          excerpt: `${this.quote(yy_.yytext)} in block comment`
        });

        break;

      case 3:
        /*! Conditions:: block_comment */
        /*! Rule::       \*\/ */
        this.startRanges.pop();

        this.popState();
        break;

      case 4:
        /*! Conditions:: block_comment */
        /*! Rule::       .|{newline} */
        // Do nothing
        break;

      case 5:
        /*! Conditions:: block_comment */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: 'Unterminated block comment'
        });

        break;

      case 6:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {single_line_comment} */
        this.addNewline();

        break;

      case 7:
        /*! Conditions:: quoted_string braced_string */
        /*! Rule::       \\[^abfnrtv"\\] */
        this.addText(yy_.yytext);

        this.messages.push({
          severity: 'warning',

          location: {
            file: this.filePath,
            position: this.rangeFromLocation(yy_.yylloc)
          },

          excerpt: `Unknown escape sequence ${this.quote(yy_.yytext)}`
        });

        break;

      case 8:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       " */
        this.begin('quoted_string');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        this.addText(yy_.yytext);
        break;

      case 9:
        /*! Conditions:: quoted_string */
        /*! Rule::       \\.|[^$"\n\r] */
        this.addText(yy_.yytext);

        break;

      case 10:
        /*! Conditions:: quoted_string */
        /*! Rule::       " */
        this.startRanges.pop();

        this.popState();
        this.addText(yy_.yytext);
        break;

      case 11:
        /*! Conditions:: quoted_string macro_parameter_value_quoted_string */
        /*! Rule::       {newline}|$ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: `Missing terminating ${this.quote('"')}`
        });

        this.popState();
        break;

      case 12:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       \{\{ */
        this.begin('braced_string');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        this.addText(yy_.yytext);
        break;

      case 13:
        /*! Conditions:: braced_string */
        /*! Rule::       (?:[^}]|\}[^}])+ */
        this.addText(yy_.yytext);

        break;

      case 14:
        /*! Conditions:: braced_string */
        /*! Rule::       \}\} */
        this.startRanges.pop();

        this.popState();
        this.addText(yy_.yytext);
        break;

      case 15:
        /*! Conditions:: braced_string macro_parameter_value_braced_string */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: `Missing terminating ${this.quote('}}')}`
        });

        break;

      case 16:
        /*! Conditions:: INITIAL quoted_string macro_parameter_value_quoted_string */
        /*! Rule::       {macro_use}\( */
        let i = yy_.yyleng - 2;

        if (yy_.yytext.charAt(i) === '.') {
          this.messages.push({
            severity: 'warning',

            location: {
              file: this.filePath,

              position: [
                [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i],
                [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i + 1]
              ]
            },

            excerpt: `Unnecessary ${this.quote('.')} after macro name`
          });
        } else {
          i++;
        }

        this.macroUse = new MacroUseElement(this.getMacro(yy_.yytext.substring(1, i)), [
          [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
          [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i]
        ]);

        this.begin('macro_parameter_value_list');
        break;

      case 17:
        /*! Conditions:: macro_parameter_value_list */
        /*! Rule::       [^'#)] */
        this.unput(yy_.yytext);

        this.begin('macro_parameter_value');
        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        this.macroParameterValue = '';
        break;

      case 18:
        /*! Conditions:: macro_parameter_value_list */
        /*! Rule::       ['#)] */
        {
          const macrosByName = this.macroUse.macrosByName;
          const parameterNameIndex = Object.keys(macrosByName).length;
          const macro = this.macroUse.macro;

          if (parameterNameIndex >= macro.parameterNames.length) {
            throw new CsoundPreprocessorError({
              severity: 'error',

              location: {
                file: this.filePath,

                position: [
                  this.startRanges.pop()[0],
                  [yy_.yylloc.last_line - 1, yy_.yylloc.last_column - 1]
                ]
              },

              excerpt: 'Too many arguments provided to function-like macro',

              trace: [{
                severity: 'info',

                location: {
                  file: this.filePath,
                  position: macro.range
                },

                excerpt: `Macro ${this.quote(macro.name)} defined here`
              }]
            });
          }

          const macroName = macro.parameterNames[parameterNameIndex];

          macrosByName[macroName] = {
            name: macroName,
            body: this.macroParameterValue
          };

          if (yy_.yytext === ')') {
            this.startRanges.pop();
            this.popState();
            this.expandMacro(YY_START);
          } else if (yy_.yytext !== '\'') {
            this.messages.push({
              severity: 'warning',

              location: {
                file: this.filePath,
                position: this.rangeFromLocation(yy_.yylloc)
              },

              excerpt: `${this.quote(yy_.yytext)} instead of single quote used to separate macro parameters`
            });
          }
        }

        break;

      case 19:
        /*! Conditions:: macro_parameter_value */
        /*! Rule::       ['#)] */
        this.unput(yy_.yytext);

        this.popState();
        break;

      case 20:
        /*! Conditions:: macro_parameter_value */
        /*! Rule::       " */
        this.begin('macro_parameter_value_quoted_string');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        this.macroParameterValue += yy_.yytext;
        break;

      case 21:
        /*! Conditions:: macro_parameter_value */
        /*! Rule::       \{\{ */
        this.begin('macro_parameter_value_braced_string');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        this.macroParameterValue += yy_.yytext;
        break;

      case 22:
        /*! Conditions:: macro_parameter_value */
        /*! Rule::       \( */
        this.begin('macro_parameter_value_parenthetical');

        this.macroParameterValue += yy_.yytext;
        break;

      case 23:
        /*! Conditions:: macro_parameter_value_quoted_string macro_parameter_value_braced_string */
        /*! Rule::       [#')] */
        this.macroParameterValue += yy_.yytext;

        const solution = {
          position: this.rangeFromLocation(yy_.yylloc),
          replaceWith: '\\' + yy_.yytext
        };

        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: solution.position
          },

          excerpt: `${this.quote(yy_.yytext)} must be replaced with ${this.quote(solution.replaceWith)}`,
          solutions: [solution]
        });

        break;

      case 24:
        /*! Conditions:: macro_parameter_value_quoted_string macro_parameter_value_braced_string */
        /*! Rule::       \\[#')] */
        this.macroParameterValue += yy_.yytext.charAt(yy_.yyleng - 1);

        break;

      case 25:
        /*! Conditions:: macro_parameter_value_quoted_string */
        /*! Rule::       " */
        this.macroParameterValue += yy_.yytext;

        this.startRanges.pop();
        this.popState();
        break;

      case 26:
        /*! Conditions:: macro_parameter_value_braced_string */
        /*! Rule::       \}\} */
        this.macroParameterValue += yy_.yytext;

        this.startRanges.pop();
        this.popState();
        break;

      case 27:
        /*! Conditions:: macro_parameter_value_parenthetical */
        /*! Rule::       \( */
        this.macroParameterValue += yy_.yytext;

        this.begin(YY_START);
        break;

      case 28:
        /*! Conditions:: macro_parameter_value_parenthetical */
        /*! Rule::       \) */
        this.macroParameterValue += yy_.yytext;

        this.popState();
        break;

      case 29:
        /*! Conditions:: macro_parameter_value macro_parameter_value_quoted_string macro_parameter_value_braced_string macro_parameter_value_parenthetical */
        /*! Rule::       .|{newline} */
        this.macroParameterValue += yy_.yytext;

        break;

      case 30:
        /*! Conditions:: INITIAL quoted_string macro_parameter_value_quoted_string */
        /*! Rule::       {macro_use} */
        {
          let i = yy_.yyleng - 1;

          if (yy_.yytext.charAt(i) === '.') {
            const character = this.input();
            this.unput(character);

            // This needs to be kept synchronized with the macro name patterns.
            if (!/\w/.test(character)) {
              this.messages.push({
                severity: 'warning',

                location: {
                  file: this.filePath,

                  position: [
                    [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i],
                    [yy_.yylloc.first_line - 1, yy_.yylloc.first_column + i + 1]
                  ]
                },

                excerpt: `Unnecessary ${this.quote('.')} after macro name`
              });
            }
          } else {
            i++;
          }

          this.macroUse = new MacroUseElement(
            this.getMacro(yy_.yytext.substring(1, i)),
            this.rangeFromLocation(yy_.yylloc)
          );

          this.expandMacro(YY_START);
        }

        break;

      case 31:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {define} */
        this.begin('define_directive');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        break;

      case 32:
        /*! Conditions:: define_directive */
        /*! Rule::       {identifier}\(? */
        this.popState();

        const newMacro = {
          body: ''
        };

        const lastCharacterIndex = yy_.yyleng - 1;

        if (yy_.yytext.charAt(lastCharacterIndex) === '(') {
          this.begin('macro_parameter_name_list');

          this.startRanges.push([
            [yy_.yylloc.last_line - 1, yy_.yylloc.last_column - 1],
            [yy_.yylloc.last_line - 1, yy_.yylloc.last_column]
          ]);

          newMacro.name = yy_.yytext.substr(0, lastCharacterIndex);
          newMacro.parameterNames = [];

          newMacro.range = [
            [yy_.yylloc.first_line - 1, yy_.yylloc.first_column],
            [yy_.yylloc.last_line - 1, yy_.yylloc.last_column - 1]
          ];
        } else {
          this.begin('before_macro_body');
          newMacro.name = yy_.yytext;
          newMacro.range = this.rangeFromLocation(yy_.yylloc);
        }

        const macro = this.macrosByName[newMacro.name];

        if (macro) {
          const message = {
            severity: 'warning',

            location: {
              file: this.filePath,
              position: newMacro.range
            },

            excerpt: `${this.quote(newMacro.name)} macro redefined`
          };

          if (macro.range) {
            message.trace = [{
              severity: 'info',

              location: {
                file: this.filePath,
                position: macro.range
              },

              excerpt: 'Previous definition is here'
            }];
          } else {
            message.text += `, was ${this.quote(macro.body)}`;
          }

          this.messages.push(message);
        }

        this.macro = newMacro;
        this.macrosByName[newMacro.name] = newMacro;
        break;

      case 33:
        /*! Conditions:: macro_parameter_name_list after_macro_parameter_name_separator */
        /*! Rule::       {identifier} */
        const parameterNames = this.macro.parameterNames;

        if (parameterNames.indexOf(yy_.yytext) >= 0) {
          throw new CsoundPreprocessorError({
            severity: 'error',

            location: {
              file: this.filePath,
              position: this.rangeFromLocation(yy_.yylloc)
            },

            excerpt: `Duplicate macro parameter name ${this.quote(yy_.yytext)}`
          });
        }

        parameterNames.push(yy_.yytext);

        if ('after_macro_parameter_name_separator' === YY_START)
          this.popState();

        this.begin('after_macro_parameter_name');
        break;

      case 34:
        /*! Conditions:: macro_parameter_name_list */
        /*! Rule::       \) */
        this.startRanges.pop();

        this.begin('before_macro_body');
        break;

      case 35:
        /*! Conditions:: macro_parameter_name_list after_macro_parameter_name_separator */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 36:
        /*! Conditions:: macro_parameter_name_list after_macro_parameter_name_separator */
        /*! Rule::       . */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Expected macro parameter name'
        });

        break;

      case 37:
        /*! Conditions:: macro_parameter_name_list */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: `Missing terminating ${this.quote(')')}`
        });

        break;

      case 38:
        /*! Conditions:: after_macro_parameter_name */
        /*! Rule::       ['#] */
        if (yy_.yytext !== '\'') {
          this.messages.push({
            severity: 'warning',

            location: {
              file: this.filePath,
              position: this.rangeFromLocation(yy_.yylloc)
            },

            excerpt: `${this.quote(yy_.yytext)} instead of single quote used to separate macro parameters`
          });
        }

        this.popState();
        this.begin('after_macro_parameter_name_separator');
        break;

      case 39:
        /*! Conditions:: after_macro_parameter_name */
        /*! Rule::       \) */
        this.popState();

        this.popState();
        this.begin('before_macro_body');
        break;

      case 40:
        /*! Conditions:: after_macro_parameter_name */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 41:
        /*! Conditions:: after_macro_parameter_name */
        /*! Rule::       . */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Expected single quote in macro parameter list'
        });

        break;

      case 42:
        /*! Conditions:: before_macro_body */
        /*! Rule::       # */
        this.popState();

        this.begin('macro_body');
        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        break;

      case 43:
        /*! Conditions:: before_macro_body */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 44:
        /*! Conditions:: before_macro_body */
        /*! Rule::       [^#]|$ */
        const message = {
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: `Expected ${this.quote('#')} after macro name`
        };

        if (yy_.yytext.length > 0)
          throw new CsoundPreprocessorError(message);

        this.messages.push(message);
        break;

      case 45:
        /*! Conditions:: macro_body */
        /*! Rule::       \\# */
        this.macro.body += '#';

        break;

      case 46:
        /*! Conditions:: macro_body */
        /*! Rule::       [^#] */
        this.macro.body += yy_.yytext;

        break;

      case 47:
        /*! Conditions:: macro_body */
        /*! Rule::       # */
        this.startRanges.pop();

        this.popState();
        this.addText(' ');
        break;

      case 48:
        /*! Conditions:: macro_body */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: `Missing terminating ${this.quote('#')}`
        });

        break;

      case 49:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {undef} */
        this.begin('undef_directive');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        break;

      case 50:
        /*! Conditions:: undef_directive */
        /*! Rule::       {identifier} */
        this.startRanges.pop();

        this.popState();

        if (this.macrosByName[yy_.yytext]) {
          delete this.macrosByName[yy_.yytext];
        } else {
          this.messages.push({
            severity: 'error',

            location: {
              file: this.filePath,
              position: this.rangeFromLocation(yy_.yylloc)
            },

            excerpt: `${this.quote(yy_.yytext)} macro is not defined`
          });
        }

        break;

      case 51:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {ifdef_or_ifndef} */
        this.begin((yy_.yytext.startsWith('#ifdef') ? 'ifdef_directive' : 'ifndef_directive'));

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        break;

      case 52:
        /*! Conditions:: ifdef_directive */
        /*! Rule::       {identifier} */
        this.popState();

        this.begin((this.macrosByName[yy_.yytext] ? 'ifdef_true' : 'ifdef_false'));
        break;

      case 53:
        /*! Conditions:: ifndef_directive */
        /*! Rule::       {identifier} */
        this.popState();

        this.begin((!this.macrosByName[yy_.yytext] ? 'ifdef_true' : 'ifdef_false'));
        break;

      case 54:
        /*! Conditions:: ifdef_true ifdef_false else_true else_false */
        /*! Rule::       {endif} */
        this.startRanges.pop();

        this.popState();
        break;

      case 55:
        /*! Conditions:: else_true else_false */
        /*! Rule::       {else} */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromLocation(yy_.yylloc)
          },

          excerpt: '#else after #else'
        });

        break;

      case 56:
        /*! Conditions:: ifdef_true */
        /*! Rule::       {else} */
        this.popState();

        this.begin('else_false');
        break;

      case 57:
        /*! Conditions:: ifdef_false */
        /*! Rule::       {else} */
        this.popState();

        this.begin('else_true');
        break;

      case 58:
        /*! Conditions:: ifdef_false else_false */
        /*! Rule::       .|{newline} */
        // Do nothing
        break;

      case 59:
        /*! Conditions:: ifdef_true ifdef_false else_true else_false */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: 'Unterminated conditional directive'
        });

        break;

      case 60:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {endif} */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromLocation(yy_.yylloc)
          },

          excerpt: `${yy_.yytext} without #ifdef or #ifndef`
        });

        break;

      case 61:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {else} */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromLocation(yy_.yylloc)
          },

          excerpt: '#else without #ifdef or #ifndef'
        });

        break;

      case 62:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {include} */
        this.begin('include_directive');

        this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
        break;

      case 63:
        /*! Conditions:: include_directive */
        /*! Rule::       [ \t] */
        // Do nothing
        break;

      case 64:
        /*! Conditions:: include_directive */
        /*! Rule::       [^ \t] */
        {
          const includeRange = this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column);
          const delimiter = yy_.yytext;

          if (delimiter !== '"') {
            this.messages.push({
              severity: 'warning',

              location: {
                file: this.filePath,
                position: includeRange
              },

              excerpt: `${this.quote(delimiter)} instead of ${this.quote('"')} used to enclose file path`
            });
          }

          let includeFilePath = '';

          for (let character = this.input(); character !== delimiter; character = this.input()) {
            if (character === '\n' || character === '\r' || !character) {
              throw new CsoundPreprocessorError({
                severity: 'error',

                location: {
                  file: this.filePath,
                  position: includeRange
                },

                excerpt: `Missing terminating ${this.quote(delimiter)}`
              });
            }

            includeFilePath += character;
          }

          this.popState();

          if (includeFilePath.length > 0) {
            let paths = [];

            if (path.isAbsolute(includeFilePath)) {
              paths.push(includeFilePath);
            } else {
              // From http://csound.com/docs/manual/OrchDirFiles.html, first
              // search the current directory, then the directory of the file being
              // preprocessed.
              paths.push(...this.currentDirectories);

              if (this.filePath)
                paths.push(path.dirname(this.filePath));

              // If there’s a file named .csound-include-directories in the current
              // directory, assume it contains a list of directory paths, one per
              // line, and also search those.
              for (const directory of this.currentDirectories) {
                const absolutePath = path.join(directory, '.csound-include-directories');

                try {
                  const stats = fs.statSync(absolutePath);

                  if (stats && stats.isFile())
                    paths.push(...fs.readFileSync(absolutePath, 'utf8').trim().split(/\n|\r\n?/));
                } catch (error) {
                  // Do nothing
                }
              }

              // Finally, if this lexer has an includeDirectories property, search
              // those.
              if (this.includeDirectories)
                paths.push(...this.includeDirectories);

              paths = paths.map((directory) => path.join(directory, includeFilePath));
            }

            for (const absolutePath of paths) {
              let stats;

              try {
                stats = fs.statSync(absolutePath);
              } catch (error) {
                continue;
              }

              if (stats.isFile()) {
                if (this.includeDepth === this.maximumIncludeDepth) {
                  throw new CsoundPreprocessorError({
                    severity: 'error',

                    location: {
                      file: this.filePath,
                      position: includeRange
                    },

                    excerpt: '#include nested too deeply'
                  });
                }

                const preprocessor = this.makePreprocessor(fs.readFileSync(absolutePath, 'utf8'));
                preprocessor.filePath = absolutePath;
                preprocessor.includeDepth = this.includeDepth + 1;
                preprocessor.lex();

                for (const childNode of preprocessor.rootElement.childNodes) {
                  this.rootElement.childNodes.push(childNode);
                }

                this.currentTextNode = null;
                return;
              }
            }

            throw new CsoundPreprocessorError({
              severity: 'error',

              location: {
                file: this.filePath,
                position: includeRange
              },

              excerpt: `${this.quote(includeFilePath)} file not found`
            });
          } else {
            this.messages.push({
              severity: 'warning',

              location: {
                file: this.filePath,
                position: includeRange
              },

              excerpt: 'Empty file path'
            });
          }
        }

        break;

      case 65:
        /*! Conditions:: include_directive */
        /*! Rule::       {newline}|$ */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: 'File path missing'
        });

        break;

      case 66:
        /*! Conditions:: define_directive undef_directive ifdef_directive ifndef_directive */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 67:
        /*! Conditions:: define_directive undef_directive ifdef_directive ifndef_directive */
        /*! Rule::       [^\s] */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Macro name must be an identifier'
        });

        break;

      case 68:
        /*! Conditions:: define_directive undef_directive ifdef_directive ifndef_directive */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: 'Macro name missing'
        });

        break;

      case 69:
        /*! Conditions:: INITIAL macro_parameter_value_list */
        /*! Rule::       @ */
        this.begin('next_power_of_2');

        break;

      case 70:
        /*! Conditions:: next_power_of_2 */
        /*! Rule::       @ */
        this.popState();

        this.begin('next_power_of_2_plus_1');
        break;

      case 71:
        /*! Conditions:: next_power_of_2 */
        /*! Rule::       \d+ */
        this.popState();

        this.addText(Math.pow(2, Math.ceil(Math.log2(Number(yy_.yytext) + 1))).toString());
        break;

      case 72:
        /*! Conditions:: next_power_of_2_plus_1 */
        /*! Rule::       \d+ */
        this.popState();

        this.addText(
          (yy_.yytext === '0' ? '2' : (Math.pow(2, Math.ceil(Math.log2(Number(yy_.yytext)))) + 1).toString())
        );

        break;

      case 73:
        /*! Conditions:: next_power_of_2 next_power_of_2_plus_1 */
        /*! Rule::       [ \t]+ */
        this.messages.push({
          severity: 'warning',

          location: {
            file: this.filePath,
            position: this.rangeFromLocation(yy_.yylloc)
          },

          excerpt: 'Unnecessary whitespace in next-power-of-2 expander'
        });

        break;

      case 74:
        /*! Conditions:: next_power_of_2 next_power_of_2_plus_1 */
        /*! Rule::       [^ \t\d]|$ */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Expected integer'
        });

        break;

      case 75:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       \{ */
        if (this.isScorePreprocessor) {
          this.macro = {
            body: ''
          };

          this.startRanges.push(this.rangeFromLocation(yy_.yylloc));
          this.begin('score_loop');
          this.begin('score_loop_after_left_brace');
        } else {
          this.addText(yy_.yytext);
        }

        break;

      case 76:
        /*! Conditions:: score_loop_after_left_brace */
        /*! Rule::       [1-9]\d* */
        this.macro.repeatCount = Number(yy_.yytext);

        this.popState();
        this.begin('score_loop_after_repeat_count');
        break;

      case 77:
        /*! Conditions:: score_loop_after_left_brace */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 78:
        /*! Conditions:: score_loop_after_left_brace */
        /*! Rule::       .|{newline} */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Expected integer greater than 0'
        });

        break;

      case 79:
        /*! Conditions:: score_loop_after_repeat_count */
        /*! Rule::       {identifier} */
        this.macro.repititionMacro = {
          name: yy_.yytext
        };

        this.popState();
        this.begin('score_loop_after_repetition_macro_name');
        break;

      case 80:
        /*! Conditions:: score_loop_after_repeat_count */
        /*! Rule::       {newline} */
        this.popState();

        break;

      case 81:
        /*! Conditions:: score_loop_after_repeat_count */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 82:
        /*! Conditions:: score_loop_after_repeat_count */
        /*! Rule::       . */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Expected macro name'
        });

        break;

      case 83:
        /*! Conditions:: score_loop_after_repetition_macro_name */
        /*! Rule::       {newline} */
        this.popState();

        break;

      case 84:
        /*! Conditions:: score_loop_after_repetition_macro_name */
        /*! Rule::       \s+ */
        // Do nothing
        break;

      case 85:
        /*! Conditions:: score_loop_after_repetition_macro_name */
        /*! Rule::       . */
        throw new CsoundPreprocessorError({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.rangeFromPosition(yy_.yylloc.first_line, yy_.yylloc.first_column)
          },

          excerpt: 'Expected newline'
        });

        break;

      case 86:
        /*! Conditions:: score_loop inner_score_loop */
        /*! Rule::       \{ */
        this.macro.body += yy_.yytext;

        this.begin('inner_score_loop');
        break;

      case 87:
        /*! Conditions:: score_loop */
        /*! Rule::       \} */
        const repititionMacro = this.macro.repititionMacro;

        for (let repitition = 1; repitition <= this.macro.repeatCount; repitition++) {
          this.macroUse = new MacroUseElement(this.macro, this.rangeFromLocation(yy_.yylloc));

          if (repititionMacro) {
            repititionMacro.body = repitition.toString();
            this.macroUse.macrosByName[repititionMacro.name] = repititionMacro;
          }

          this.expandMacro(YY_START);
        }

        this.startRanges.pop();
        this.popState();
        break;

      case 88:
        /*! Conditions:: inner_score_loop */
        /*! Rule::       \} */
        this.macro.body += yy_.yytext;

        this.popState();
        break;

      case 89:
        /*! Conditions:: score_loop inner_score_loop */
        /*! Rule::       .|{newline} */
        this.macro.body += yy_.yytext;

        break;

      case 90:
        /*! Conditions:: score_loop inner_score_loop */
        /*! Rule::       $ */
        this.messages.push({
          severity: 'error',

          location: {
            file: this.filePath,
            position: this.startRanges.pop()
          },

          excerpt: `Missing terminating ${this.quote('}')}`
        });

        break;

      case 91:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       {newline} */
        this.addNewline();

        break;

      case 92:
        /*! Conditions:: define_directive before_macro_body undef_directive ifdef_directive ifndef_directive ifdef_true else_true INITIAL */
        /*! Rule::       . */
        this.addText(yy_.yytext);

        break;
      }
    },

    simpleCaseActionClusters: {},

    rules: [
      /*  0: */  /^(?:(\\[\t ]*(?:;.*)?(?:\n|\r\n?)))/,
      /*  1: */  /^(?:\/\*)/,
      /*  2: */  /^(?:\/\*)/,
      /*  3: */  /^(?:\*\/)/,
      /*  4: */  /^(?:.|(\n|\r\n?))/,
      /*  5: */  /^(?:$)/,
      /*  6: */  /^(?:((?:;|\/\/).*(?:(?:\n|\r\n?)|$)))/,
      /*  7: */  /^(?:\\[^abfnrtv"\\])/,
      /*  8: */  /^(?:")/,
      /*  9: */  /^(?:\\.|[^$"\n\r])/,
      /* 10: */  /^(?:")/,
      /* 11: */  /^(?:(\n|\r\n?)|$)/,
      /* 12: */  /^(?:\{\{)/,
      /* 13: */  /^(?:(?:[^}]|\}[^}])+)/,
      /* 14: */  /^(?:\}\})/,
      /* 15: */  /^(?:$)/,
      /* 16: */  /^(?:(\$(?:[^\W\d]\w*)\.?)\()/,
      /* 17: */  /^(?:[^'#)])/,
      /* 18: */  /^(?:['#)])/,
      /* 19: */  /^(?:['#)])/,
      /* 20: */  /^(?:")/,
      /* 21: */  /^(?:\{\{)/,
      /* 22: */  /^(?:\()/,
      /* 23: */  /^(?:[#')])/,
      /* 24: */  /^(?:\\[#')])/,
      /* 25: */  /^(?:")/,
      /* 26: */  /^(?:\}\})/,
      /* 27: */  /^(?:\()/,
      /* 28: */  /^(?:\))/,
      /* 29: */  /^(?:.|(\n|\r\n?))/,
      /* 30: */  /^(?:(\$(?:[^\W\d]\w*)\.?))/,
      /* 31: */  /^(?:(#[\t ]*(?:define)))/,
      /* 32: */  /^(?:([^\W\d]\w*)\(?)/,
      /* 33: */  /^(?:([^\W\d]\w*))/,
      /* 34: */  /^(?:\))/,
      /* 35: */  /^(?:\s+)/,
      /* 36: */  /^(?:.)/,
      /* 37: */  /^(?:$)/,
      /* 38: */  /^(?:['#])/,
      /* 39: */  /^(?:\))/,
      /* 40: */  /^(?:\s+)/,
      /* 41: */  /^(?:.)/,
      /* 42: */  /^(?:#)/,
      /* 43: */  /^(?:\s+)/,
      /* 44: */  /^(?:[^#]|$)/,
      /* 45: */  /^(?:\\#)/,
      /* 46: */  /^(?:[^#])/,
      /* 47: */  /^(?:#)/,
      /* 48: */  /^(?:$)/,
      /* 49: */  /^(?:((?:#undef)))/,
      /* 50: */  /^(?:([^\W\d]\w*))/,
      /* 51: */  /^(?:(#ifn?(?:def)))/,
      /* 52: */  /^(?:([^\W\d]\w*))/,
      /* 53: */  /^(?:([^\W\d]\w*))/,
      /* 54: */  /^(?:(#end(?:if)?\b))/,
      /* 55: */  /^(?:(#else))/,
      /* 56: */  /^(?:(#else))/,
      /* 57: */  /^(?:(#else))/,
      /* 58: */  /^(?:.|(\n|\r\n?))/,
      /* 59: */  /^(?:$)/,
      /* 60: */  /^(?:(#end(?:if)?\b))/,
      /* 61: */  /^(?:(#else))/,
      /* 62: */  /^(?:((?:#include)))/,
      /* 63: */  /^(?:[ \t])/,
      /* 64: */  /^(?:[^ \t])/,
      /* 65: */  /^(?:(\n|\r\n?)|$)/,
      /* 66: */  /^(?:\s+)/,
      /* 67: */  /^(?:\S)/,
      /* 68: */  /^(?:$)/,
      /* 69: */  /^(?:@)/,
      /* 70: */  /^(?:@)/,
      /* 71: */  /^(?:\d+)/,
      /* 72: */  /^(?:\d+)/,
      /* 73: */  /^(?:[ \t]+)/,
      /* 74: */  /^(?:[^ \t\d]|$)/,
      /* 75: */  /^(?:\{)/,
      /* 76: */  /^(?:[1-9]\d*)/,
      /* 77: */  /^(?:\s+)/,
      /* 78: */  /^(?:.|(\n|\r\n?))/,
      /* 79: */  /^(?:([^\W\d]\w*))/,
      /* 80: */  /^(?:(\n|\r\n?))/,
      /* 81: */  /^(?:\s+)/,
      /* 82: */  /^(?:.)/,
      /* 83: */  /^(?:(\n|\r\n?))/,
      /* 84: */  /^(?:\s+)/,
      /* 85: */  /^(?:.)/,
      /* 86: */  /^(?:\{)/,
      /* 87: */  /^(?:\})/,
      /* 88: */  /^(?:\})/,
      /* 89: */  /^(?:.|(\n|\r\n?))/,
      /* 90: */  /^(?:$)/,
      /* 91: */  /^(?:(\n|\r\n?))/,
      /* 92: */  /^(?:.)/
    ],

    conditions: {
      'block_comment': {
        rules: [2, 3, 4, 5],
        inclusive: false
      },

      'quoted_string': {
        rules: [0, 7, 9, 10, 11, 16, 30],
        inclusive: false
      },

      'braced_string': {
        rules: [7, 13, 14, 15],
        inclusive: false
      },

      'define_directive': {
        rules: [1, 6, 8, 12, 31, 32, 49, 51, 60, 61, 62, 66, 67, 68, 75, 91, 92],
        inclusive: true
      },

      'macro_parameter_name_list': {
        rules: [33, 34, 35, 36, 37],
        inclusive: false
      },

      'after_macro_parameter_name': {
        rules: [38, 39, 40, 41],
        inclusive: false
      },

      'after_macro_parameter_name_separator': {
        rules: [33, 35, 36],
        inclusive: false
      },

      'before_macro_body': {
        rules: [1, 6, 8, 12, 31, 42, 43, 44, 49, 51, 60, 61, 62, 75, 91, 92],
        inclusive: true
      },

      'macro_body': {
        rules: [45, 46, 47, 48],
        inclusive: false
      },

      'undef_directive': {
        rules: [1, 6, 8, 12, 31, 49, 50, 51, 60, 61, 62, 66, 67, 68, 75, 91, 92],
        inclusive: true
      },

      'ifdef_directive': {
        rules: [1, 6, 8, 12, 31, 49, 51, 52, 60, 61, 62, 66, 67, 68, 75, 91, 92],
        inclusive: true
      },

      'ifndef_directive': {
        rules: [1, 6, 8, 12, 31, 49, 51, 53, 60, 61, 62, 66, 67, 68, 75, 91, 92],
        inclusive: true
      },

      'ifdef_true': {
        rules: [1, 6, 8, 12, 31, 49, 51, 54, 56, 59, 60, 61, 62, 75, 91, 92],
        inclusive: true
      },

      'ifdef_false': {
        rules: [54, 57, 58, 59],
        inclusive: false
      },

      'else_true': {
        rules: [1, 6, 8, 12, 31, 49, 51, 54, 55, 59, 60, 61, 62, 75, 91, 92],
        inclusive: true
      },

      'else_false': {
        rules: [54, 55, 58, 59],
        inclusive: false
      },

      'include_directive': {
        rules: [63, 64, 65],
        inclusive: false
      },

      'macro_parameter_value_list': {
        rules: [17, 18, 69],
        inclusive: false
      },

      'macro_parameter_value': {
        rules: [19, 20, 21, 22, 29],
        inclusive: false
      },

      'macro_parameter_value_quoted_string': {
        rules: [0, 11, 16, 23, 24, 25, 29, 30],
        inclusive: false
      },

      'macro_parameter_value_braced_string': {
        rules: [15, 23, 24, 26, 29],
        inclusive: false
      },

      'macro_parameter_value_parenthetical': {
        rules: [27, 28, 29],
        inclusive: false
      },

      'next_power_of_2': {
        rules: [70, 71, 73, 74],
        inclusive: false
      },

      'next_power_of_2_plus_1': {
        rules: [72, 73, 74],
        inclusive: false
      },

      'score_loop': {
        rules: [86, 87, 89, 90],
        inclusive: false
      },

      'score_loop_after_left_brace': {
        rules: [76, 77, 78],
        inclusive: false
      },

      'score_loop_after_repeat_count': {
        rules: [79, 80, 81, 82],
        inclusive: false
      },

      'score_loop_after_repetition_macro_name': {
        rules: [83, 84, 85],
        inclusive: false
      },

      'inner_score_loop': {
        rules: [86, 88, 89, 90],
        inclusive: false
      },

      'INITIAL': {
        rules: [0, 1, 6, 8, 12, 16, 30, 31, 49, 51, 60, 61, 62, 69, 75, 91, 92],
        inclusive: true
      }
    }
  };

  const fs = require('fs');
  const path = require('path');

  lexer.addNewline = function() {
    this.appendToCurrentTextNode('\n');
    this.generatedLineCount++;
    this.generatedColumnCount = 0;
  };

  lexer.addText = function(text) {
    this.appendToCurrentTextNode(text);
    this.generatedColumnCount += text.length;
  };

  lexer.appendToCurrentTextNode = function(text) {
    this.sourceMap.add(
      [this.yylloc.first_line - 1, this.yylloc.first_column],
      [this.generatedLineCount, this.generatedColumnCount]
    );

    if (this.currentTextNode) {
      this.currentTextNode.text += text;
    } else {
      this.currentTextNode = new CsoundPreprocessorTextNode(text);
      this.rootElement.childNodes.push(this.currentTextNode);
    }
  };

  lexer.expandMacro = function(YY_START) {
    const macrosByName = this.macroUse.macrosByName;
    const macro = this.macroUse.macro;

    if (macro.parameterNames && Object.keys(macrosByName).length < macro.parameterNames.length) {
      throw new CsoundPreprocessorError({
        severity: 'error',

        location: {
          file: this.filePath,
          position: lexer.rangeFromPosition(this.yylloc.first_line, this.yylloc.first_column)
        },

        excerpt: 'Too few arguments provided to function-like macro',

        trace: [{
          severity: 'info',

          location: {
            file: this.filePath,
            position: macro.range
          },

          excerpt: `Macro ${this.quote(macro.name)} defined here`
        }]
      });
    }

    if (this.expansionDepth === this.maximumExpansionDepth) {
      throw new CsoundPreprocessorError({
        severity: 'error',

        location: {
          file: this.filePath,
          position: this.macroUse.range
        },

        excerpt: 'Macro expanded too deeply'
      });
    }

    const preprocessor = this.makePreprocessor(macro.body);
    preprocessor.expansionDepth = this.expansionDepth + 1;
    preprocessor.filePath = this.filePath;
    Object.assign(preprocessor.macrosByName, macrosByName);

    try {
      preprocessor.lex();
    } catch (error) {
      if (error.lintMessage)
        error.lintMessage.location.position = this.macroUse.range;

      throw error;
    }

    this.macroUse.childNodes = preprocessor.rootElement.childNodes;
    this.rootElement.childNodes.push(this.macroUse);
    this.currentTextNode = null;

    if ('quoted_string' === YY_START) {
      this.messages.push({
        severity: 'warning',

        location: {
          file: this.filePath,
          position: this.rangeFromLocation(this.yylloc)
        },

        excerpt: `${this.quote(macro.name)} macro expanded in string`
      });
    }
  };

  lexer.getMacro = function(macroName) {
    const macro = this.macrosByName[macroName];

    if (!macro) {
      throw new CsoundPreprocessorError({
        severity: 'error',

        location: {
          file: this.filePath,
          position: this.rangeFromLocation(this.yylloc)
        },

        excerpt: `${this.quote(macroName)} is not a macro or macro parameter`
      });
    }

    return macro;
  };

  lexer.getOutput = function() {
    return this.rootElement.getOutput();
  };

  const original_lex = lexer.lex;

  lexer.lex = function() {
    const token = original_lex.apply(this, arguments);

    if (this.done) {
      this.sourceMap.add(
        [this.yylloc.first_line - 1, this.yylloc.first_column],
        [this.generatedLineCount, this.generatedColumnCount]
      );
    }

    return token;
  };

  lexer.makePreprocessor = function(input) {
    // A function like yy_scan_string is unavailable in Jison Lex.
    function Preprocessor() {
      this.yy = {};
    }

    Preprocessor.prototype = this;
    const preprocessor = new Preprocessor();
    preprocessor.includeDirectories = this.includeDirectories;
    preprocessor.isScorePreprocessor = this.isScorePreprocessor;
    preprocessor.setInput(input);
    preprocessor.currentDirectories = this.currentDirectories;
    Object.assign(preprocessor.macrosByName, this.macrosByName);
    return preprocessor;
  };

  lexer.maximumExpansionDepth = 100;
  lexer.maximumIncludeDepth = 100;
  lexer.quote = (string) => `‘${string}’`;

  lexer.rangeFromLocation = (yylloc) => {
    return [
      [yylloc.first_line - 1, yylloc.first_column],
      [yylloc.last_line - 1, yylloc.last_column]
    ];
  };

  lexer.rangeFromPosition = (line, column) => {
    const lineMinus1 = line - 1;
    return [[lineMinus1, column], [lineMinus1, column]];
  };

  const original_setInput = lexer.setInput;

  lexer.setInput = function(input, yy) {
    // This is an array because Atom::Project::getPaths
    // <https://atom.io/docs/api/latest/Project#instance-getPaths> returns an
    // array.
    this.currentDirectories = [path.resolve()];

    this.currentTextNode = null;
    this.expansionDepth = 0;
    this.includeDepth = 0;
    this.generatedColumnCount = 0;
    this.generatedLineCount = 0;

    // https://github.com/csound/csound/search?q=cs_init_math_constants_macros+path%3AEngine+filename%3Acsound_pre.lex
    this.macrosByName = {
      M_E: {
        name: 'M_E',
        body: '2.71828182845904523536'
      },

      M_LOG2E: {
        name: 'M_LOG2E',
        body: '1.44269504088896340736'
      },

      M_LOG10E: {
        name: 'M_LOG10E',
        body: '0.43429448190325182765'
      },

      M_LN2: {
        name: 'M_LN2',
        body: '0.69314718055994530942'
      },

      M_LN10: {
        name: 'M_LN10',
        body: '2.30258509299404568402'
      },

      M_PI: {
        name: 'M_PI',
        body: '3.14159265358979323846'
      },

      M_PI_2: {
        name: 'M_PI_2',
        body: '1.57079632679489661923'
      },

      M_PI_4: {
        name: 'M_PI_4',
        body: '0.78539816339744830962'
      },

      M_1_PI: {
        name: 'M_1_PI',
        body: '0.31830988618379067154'
      },

      M_2_PI: {
        name: 'M_2_PI',
        body: '0.63661977236758134308'
      },

      M_2_SQRTPI: {
        name: 'M_2_SQRTPI',
        body: '1.12837916709551257390'
      },

      M_SQRT2: {
        name: 'M_SQRT2',
        body: '1.41421356237309504880'
      },

      M_SQRT1_2: {
        name: 'M_SQRT1_2',
        body: '0.70710678118654752440'
      },

      M_INF: {
        name: 'M_INF',
        body: '800000000000.0'
      }
    };

    this.messages = [];
    this.rootElement = new CsoundPreprocessorElement();
    this.sourceMap = new SourceMap();
    this.startRanges = [];
    return original_setInput.apply(this, arguments);
  };

  class CsoundPreprocessorTextNode {
    constructor(text) {
      this.text = text;
    }

    getOutput() {
      return this.text;
    }
  }

  class CsoundPreprocessorElement {
    constructor() {
      this.childNodes = [];
    }

    getOutput() {
      let output = '';

      for (const childNode of this.childNodes) {
        output += childNode.getOutput();
      }

      return output;
    }
  }

  class MacroUseElement extends CsoundPreprocessorElement {
    constructor(macro, range) {
      super();
      this.macro = macro;
      this.macrosByName = {};
      this.range = range;
    }
  }

  // The LineMap and SourceMap classes are based on code in CoffeeScript
  // <http://coffeescript.org/documentation/docs/sourcemap.html>, which is
  // MIT-licensed <https://github.com/jashkenas/coffeescript/blob/master/LICENSE>.

  class LineMap {
    constructor(line) {
      this.line = line;
      this.columnMaps = [];
    }

    add(column, sourceLocation) {
      this.columnMaps[column] = {
        line: this.line,
        column: column,
        sourceLine: sourceLocation[0],
        sourceColumn: sourceLocation[1]
      };
    }

    sourceLocation(column) {
      for (; column >= 0; column--) {
        const map = this.columnMaps[column];

        if (map)
          return [map.sourceLine, map.sourceColumn];
      }

      return null;
    }
  }

  class SourceMap {
    constructor(line) {
      this.lineMaps = [];
    }

    add(sourceLocation, generatedLocation) {
      const line = generatedLocation[0];
      let lineMap = this.lineMaps[line];

      if (!lineMap) {
        lineMap = new LineMap(line);
        this.lineMaps[line] = lineMap;
      }

      lineMap.add(generatedLocation[1], sourceLocation);
    }

    sourceLocation(location) {
      for (let line = location[0]; line >= 0; line--) {
        const lineMap = this.lineMaps[line];

        if (lineMap)
          return lineMap.sourceLocation(location[1]);
      }

      return null;
    }

    sourceRange(range) {
      return [this.sourceLocation(range[0]), this.sourceLocation(range[1])];
    }
  }

  class CsoundPreprocessorError extends Error {
    constructor(lintMessage) {
      super(lintMessage.excerpt);
      this.name = 'CsoundPreprocessorError';
      this.lintMessage = lintMessage;
    }
  }

  return lexer;
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
  exports.lexer = CsoundPreprocessor;

  exports.lex = function() {
    return CsoundPreprocessor.lex.apply(lexer, arguments);
  };
}
